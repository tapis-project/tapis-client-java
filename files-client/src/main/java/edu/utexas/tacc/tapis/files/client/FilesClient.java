package edu.utexas.tacc.tapis.files.client;

import edu.utexas.tacc.tapis.client.shared.Utils;
import edu.utexas.tacc.tapis.client.shared.exceptions.TapisClientException;
import edu.utexas.tacc.tapis.files.client.gen.ApiClient;
import edu.utexas.tacc.tapis.files.client.gen.ApiException;
import edu.utexas.tacc.tapis.files.client.gen.api.ContentApi;
import edu.utexas.tacc.tapis.files.client.gen.api.FileOperationsApi;
import edu.utexas.tacc.tapis.files.client.gen.api.HealthApi;
import edu.utexas.tacc.tapis.files.client.gen.api.PermissionsApi;
import edu.utexas.tacc.tapis.files.client.gen.api.ShareApi;
import edu.utexas.tacc.tapis.files.client.gen.api.TransfersApi;
import edu.utexas.tacc.tapis.files.client.gen.model.CreatePermissionRequest;
import edu.utexas.tacc.tapis.files.client.gen.model.FileInfo;
import edu.utexas.tacc.tapis.files.client.gen.model.FileListingResponse;
import edu.utexas.tacc.tapis.files.client.gen.model.FilePermission;
import edu.utexas.tacc.tapis.files.client.gen.model.FilePermissionResponse;
import edu.utexas.tacc.tapis.files.client.gen.model.FilePermissionStringResponse;
import edu.utexas.tacc.tapis.files.client.gen.model.FileStringResponse;
import edu.utexas.tacc.tapis.files.client.gen.model.HeaderByteRange;
import edu.utexas.tacc.tapis.files.client.gen.model.HealthCheckResponse;
import edu.utexas.tacc.tapis.files.client.gen.model.MoveCopyRenameRequest;
import edu.utexas.tacc.tapis.files.client.gen.model.MoveCopyRenameRequest.OperationEnum;
import edu.utexas.tacc.tapis.files.client.gen.model.TapisResponse;
import edu.utexas.tacc.tapis.files.client.gen.model.TransferTask;
import edu.utexas.tacc.tapis.files.client.gen.model.TransferTaskListResponse;
import edu.utexas.tacc.tapis.files.client.gen.model.TransferTaskRequest;
import edu.utexas.tacc.tapis.files.client.gen.model.TransferTaskResponse;
import org.apache.commons.lang3.StringUtils;

import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

/**
 * Class providing a convenient front-end to the automatically generated client code
 * for the Files Service REST API.
 * Underlying client classes with "gen" in the package name are generated by
 * openapi-generator each time a build is run.
 */
public class FilesClient {

  // ************************************************************************
  // *********************** Constants **************************************
  // ************************************************************************

  // Header key for JWT
  public static final String TAPIS_JWT_HEADER = "X-Tapis-Token";

    // Instance of the underlying autogenerated client.
    private final FileOperationsApi fileOperations;
    private final PermissionsApi filePermissions;
    private final ShareApi fileShares;
    private final ContentApi fileContents;
    private final TransfersApi fileTransfers;
    private final HealthApi fileHealth;
    private final ApiClient apiClient;

  /**
   * Default constructor which uses the compiled-in basePath based on the openapi spec
   *   used to autogenerate the client.
   */
  public FilesClient()
  {
    apiClient = new ApiClient();
    fileOperations = new FileOperationsApi(apiClient);
    fileContents = new ContentApi(apiClient);
    filePermissions = new PermissionsApi(apiClient);
    fileShares = new ShareApi(apiClient);
    fileTransfers = new TransfersApi(apiClient);
    fileHealth = new HealthApi(apiClient);
  }


  /**
   * Constructor that overrides the compiled-in basePath value in ApiClient.
   * The path should include the URL prefix up to and including the service root.
   * In production environments the protocol should be https and the host/port will
   * be specific to that environment.
   *
   * @param basePath the base path URL prefix up to and including the service root
   * @param jwt the token to set in an HTTP header
   */
    public FilesClient(String basePath, String jwt) {
        apiClient = new ApiClient();
        if (!StringUtils.isBlank(basePath)) apiClient.setBasePath(basePath);
        if (!StringUtils.isBlank(jwt)) apiClient.addDefaultHeader(TAPIS_JWT_HEADER, jwt);
        fileOperations = new FileOperationsApi(apiClient);
        fileContents = new ContentApi(apiClient);
        filePermissions = new PermissionsApi(apiClient);
        fileShares = new ShareApi(apiClient);
        fileTransfers = new TransfersApi(apiClient);
        fileHealth = new HealthApi(apiClient);
    }

    // getApiClient: Return underlying ApiClient
    public ApiClient getApiClient()
    {
        return apiClient;
    }

    /**
     * Get the base path.
     */
    public String getBasePath()
    {
        return getApiClient().getBasePath();
    }

    /**
     * Update base path for default client.
     */
    public FilesClient setBasePath(String basePath)
    {
        apiClient.setBasePath(basePath);
        return this;
    }

    /**
     * Add http header to default client
     */
    public FilesClient addDefaultHeader(String key, String val)
    {
        apiClient.addDefaultHeader(key, val);
        return this;
    }

  /**
   * Check service health status
   *
   * @return Service health status as a string
   * @throws TapisClientException - If api call throws an exception
   */
  public String checkHealth() throws TapisClientException
  {
    // Submit the request and return the response
    HealthCheckResponse resp = null;
    try { resp = fileHealth.healthCheck(); }
    catch (ApiException e) { Utils.throwTapisClientException(e.getCode(), e.getResponseBody(), e); }
    catch (Exception e) { Utils.throwTapisClientException(-1, null, e); }
    if (resp != null && resp.getResult() != null) return resp.getStatus(); else return null;
  }

  // -----------------------------------------------------------------------
  // --------------------------- File operations ---------------------------
  // -----------------------------------------------------------------------
  /**
   * List files/objects in a storage system.
   *
   * @param systemId system
   * @param path path relative to system rootDir
   * @param limit pagination limit
   * @param offset pagination offset
   * @param meta Flag indicating if metadata should be include. Will slow down request.
   * @return list of FileInfo objects
   * @throws TapisClientException - If api call throws an exception
   */
  public List<FileInfo> listFiles(String systemId, String path, int limit, long offset, boolean meta)
          throws TapisClientException
  {
    FileListingResponse resp = null;
    try { resp = fileOperations.listFiles(systemId, path, limit, offset, meta); }
    catch (ApiException e) { Utils.throwTapisClientException(e.getCode(), e.getResponseBody(), e); }
    catch (Exception e) { Utils.throwTapisClientException(-1, null, e); }
    if (resp != null && resp.getResult() != null) return resp.getResult(); else return null;
  }

// TODO Currently auto-generated getFileContents returns nothing so does not look useful as a java library call.
//  /**
//   * Retrieve a file from a system.
//   *
//   * @param systemId system
//   * @param path path relative to system rootDir
//   * @param range Range of bytes to send
//   * @param zip Flag indicating if contents of a folder should be zipped
//   * @param more Send 1k of UTF-8 encoded string back starting at 'page' 1, e.g. more=1
//   * @return transfer task
//   * @throws TapisClientException - If api call throws an exception
//   */
//  public void getFileContents(String systemId, String path, HeaderByteRange range, boolean zip, long more)
//          throws TapisClientException
//  {
//    try { fileContents.filesGetContents(systemId, path, range, zip, more); }
//    catch (ApiException e) { Utils.throwTapisClientException(e.getCode(), e.getResponseBody(), e); }
//    catch (Exception e) { Utils.throwTapisClientException(-1, null, e); }
//  }

  /**
   * Rename a file or folder
   *
   * @param systemId system
   * @param path path relative to system rootDir
   * @param newName The new name of the file/folder
   * @return FileStringResponse
   * @throws TapisClientException - If api call throws an exception
   */
  public FileStringResponse rename(String systemId, String path, String newName)
          throws TapisClientException
  {
    FileStringResponse resp = null;
    var renameReq = new MoveCopyRenameRequest();
    renameReq.setOperation(OperationEnum.RENAME);
    renameReq.setNewPath(newName);
    try { resp = fileOperations.moveCopyRename(systemId, path, renameReq); }
    catch (ApiException e) { Utils.throwTapisClientException(e.getCode(), e.getResponseBody(), e); }
    catch (Exception e) { Utils.throwTapisClientException(-1, null, e); }
    if (resp != null && resp.getResult() != null) return resp; else return null;
  }

  /**
   * Upload a file.
   * The file will be added at the {path} independent of the original file name
   *
   * @param systemId system
   * @param path path relative to system rootDir
   * @param file file to upload
   * @return FileStringResponse
   * @throws TapisClientException - If api call throws an exception
   */
  public FileStringResponse insert(String systemId, String path, File file)
          throws TapisClientException
  {
    FileStringResponse resp = null;
    try { resp = fileOperations.insert(systemId, path, file); }
    catch (ApiException e) { Utils.throwTapisClientException(e.getCode(), e.getResponseBody(), e); }
    catch (Exception e) { Utils.throwTapisClientException(-1, null, e); }
    if (resp != null && resp.getResult() != null) return resp; else return null;
  }

  /**
   * Delete a file or folder
   * Delete a file in {systemID} at path {path}.
   *
   * @param systemId system
   * @param path path relative to system rootDir
   * @return FileStringResponse
   * @throws TapisClientException - If api call throws an exception
   */
  public FileStringResponse delete(String systemId, String path)
          throws TapisClientException
  {
    FileStringResponse resp = null;
    try { resp = fileOperations.delete(systemId, path); }
    catch (ApiException e) { Utils.throwTapisClientException(e.getCode(), e.getResponseBody(), e); }
    catch (Exception e) { Utils.throwTapisClientException(-1, null, e); }
    if (resp != null && resp.getResult() != null) return resp; else return null;
  }

  /**
   * Create a directory
   * Create a directory in the system at path the given path
   *
   * @param systemId system
   * @param path path relative to system rootDir
   * @return FileStringResponse
   * @throws TapisClientException - If api call throws an exception
   */
  public FileStringResponse mkdir(String systemId, String path)
          throws TapisClientException
  {
    FileStringResponse resp = null;
    try { resp = fileOperations.mkdir(systemId, path, null); }
    catch (ApiException e) { Utils.throwTapisClientException(e.getCode(), e.getResponseBody(), e); }
    catch (Exception e) { Utils.throwTapisClientException(-1, null, e); }
    if (resp != null && resp.getResult() != null) return resp; else return null;
  }

  // -----------------------------------------------------------------------
  // --------------------------- Permissions -------------------------------
  // -----------------------------------------------------------------------

  /**
   * Get the API user's permissions on a file or folder.
   *
   * @param systemId system
   * @param path path relative to system rootDir
   * @param username Username to list
   * @return List of FilePermission objects
   * @throws TapisClientException - If api call throws an exception
   */
  public List<FilePermission> getFilePermissions(String systemId, String path, String username)
          throws TapisClientException
  {
    List<FilePermissionResponse> resp = null;
    try { resp = filePermissions.permissionsSystemIdPathGet(systemId, path, username); }
    catch (ApiException e) { Utils.throwTapisClientException(e.getCode(), e.getResponseBody(), e); }
    catch (Exception e) { Utils.throwTapisClientException(-1, null, e); }
    if (resp == null) return null;
    List<FilePermission> filePermissions= new ArrayList<>();
    for (FilePermissionResponse filePermResp : resp)
    {
      if (filePermResp.getResult() != null) filePermissions.add(filePermResp.getResult());
    }
    return filePermissions;
  }

  /**
   * Add permissions on an object.
   * Add a user to a file/folder.
   *
   * @param systemId system
   * @param path path relative to system rootDir
   * @param req Request containing username and permission to add
   * @return FilePermission object
   * @throws TapisClientException - If api call throws an exception
   */
  public FilePermission createFilePermissionForUser(String systemId, String path, CreatePermissionRequest req)
          throws TapisClientException
  {
    FilePermissionResponse resp = null;
    try { resp = filePermissions.permissionsSystemIdPathPost(systemId, path, req); }
    catch (ApiException e) { Utils.throwTapisClientException(e.getCode(), e.getResponseBody(), e); }
    catch (Exception e) { Utils.throwTapisClientException(-1, null, e); }
    if (resp == null || resp.getResult() == null) return null;
    return resp.getResult();
  }

  /**
   * Remove permissions on an object for a user.
   * Remove user permissions to a file/folder.
   *
   * @param systemId system
   * @param path path relative to system rootDir
   * @param username Username to list
   * @return FilePermissionStringResponse
   * @throws TapisClientException - If api call throws an exception
   */
  public FilePermissionStringResponse deleteFilePermissionForUser(String systemId, String path, String username)
          throws TapisClientException
  {
    FilePermissionStringResponse resp = null;
    try { resp = filePermissions.permissionsSystemIdPathDelete(systemId, path, username); }
    catch (ApiException e) { Utils.throwTapisClientException(e.getCode(), e.getResponseBody(), e); }
    catch (Exception e) { Utils.throwTapisClientException(-1, null, e); }
    if (resp == null || resp.getResult() == null) return null;
    return resp;
  }

  // -----------------------------------------------------------------------
  // --------------------------- Transfers -------------------------------
  // -----------------------------------------------------------------------

  /**
   * Create a background task which will transfer files to a system.
   *
   * @param req Request body specifying attributes
   * @return transfer task
   * @throws TapisClientException - If api call throws an exception
   */
  public TransferTask createTransferTask(TransferTaskRequest req) throws TapisClientException
  {
    // Submit the request and return the result
    TransferTaskResponse resp = null;
    try { resp = fileTransfers.createTransferTask(req); }
    catch (ApiException e) { Utils.throwTapisClientException(e.getCode(), e.getResponseBody(), e); }
    catch (Exception e) { Utils.throwTapisClientException(-1, null, e); }
    if (resp != null && resp.getResult() != null) return resp.getResult(); else return null;
  }

  /**
   * Get a transfer task
   *
   * @param transferTaskId Transfer task ID
   * @return transfer task
   * @throws TapisClientException - If api call throws an exception
   */
  public TransferTask getTransferTask(String transferTaskId) throws TapisClientException
  {
    TransferTaskResponse resp = null;
    try { resp = fileTransfers.getTransferTask(transferTaskId); }
    catch (ApiException e) { Utils.throwTapisClientException(e.getCode(), e.getResponseBody(), e); }
    catch (Exception e) { Utils.throwTapisClientException(-1, null, e); }
    if (resp != null && resp.getResult() != null) return resp.getResult(); else return null;
  }

  /**
   * Get a list of recent transfer tasks
   *
   * @return list of recent transfer tasks
   * @throws TapisClientException - If api call throws an exception
   */
  public List<TransferTask> getRecentTransferTasks(int limit, int offset) throws TapisClientException
  {
    TransferTaskListResponse resp = null;
    try { resp = fileTransfers.getRecentTransferTasks(limit, offset); }
    catch (ApiException e) { Utils.throwTapisClientException(e.getCode(), e.getResponseBody(), e); }
    catch (Exception e) { Utils.throwTapisClientException(-1, null, e); }
    if (resp != null && resp.getResult() != null) return resp.getResult(); else return null;
  }

  /**
   * Get history of a transfer task
   *
   * @param transferTaskId Transfer task ID
   * @return transfer task with history
   * @throws TapisClientException - If api call throws an exception
   */
  public TransferTask getTransferTaskHistory(String transferTaskId) throws TapisClientException
  {
    TransferTaskResponse resp = null;
    try { resp = fileTransfers.getTransferTaskHistory(UUID.fromString(transferTaskId)); }
    catch (ApiException e) { Utils.throwTapisClientException(e.getCode(), e.getResponseBody(), e); }
    catch (Exception e) { Utils.throwTapisClientException(-1, null, e); }
    if (resp != null && resp.getResult() != null) return resp.getResult(); else return null;
  }

  /**
   * Stop/Cancel a transfer task
   *
   * @param transferTaskId Transfer task ID
   * @return transfer task
   * @throws TapisClientException - If api call throws an exception
   */
  public TapisResponse cancelTransferTask(String transferTaskId) throws TapisClientException
  {
    TapisResponse resp = null;
    try { resp = fileTransfers.cancelTransferTask(transferTaskId); }
    catch (ApiException e) { Utils.throwTapisClientException(e.getCode(), e.getResponseBody(), e); }
    catch (Exception e) { Utils.throwTapisClientException(-1, null, e); }
    if (resp != null && resp.getResult() != null) return resp; else return null;
  }


    public FileOperationsApi operations() {
        return fileOperations;
    }

    public PermissionsApi permissions() {
        return filePermissions;
    }

    public ShareApi shares() {
        return fileShares;
    }

    public ContentApi contents() {
        return fileContents;
    }

    public TransfersApi transfers() {
        return fileTransfers;
    }

    public HealthApi health() {
        return fileHealth;
    }



}
