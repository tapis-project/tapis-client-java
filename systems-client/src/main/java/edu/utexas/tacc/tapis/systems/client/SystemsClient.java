package edu.utexas.tacc.tapis.systems.client;

import java.lang.reflect.Type;
import java.util.Collections;
import java.util.List;

import edu.utexas.tacc.tapis.systems.client.gen.api.ChildSystemsApi;
import edu.utexas.tacc.tapis.systems.client.gen.model.*;
import org.apache.commons.lang3.StringUtils;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonObject;
import com.google.gson.internal.LinkedTreeMap;

import edu.utexas.tacc.tapis.client.shared.ClientTapisGsonUtils;
import edu.utexas.tacc.tapis.client.shared.ITapisClient;
import edu.utexas.tacc.tapis.client.shared.Utils;
import edu.utexas.tacc.tapis.client.shared.exceptions.TapisClientException;
import edu.utexas.tacc.tapis.systems.client.gen.ApiClient;
import edu.utexas.tacc.tapis.systems.client.gen.ApiException;
import edu.utexas.tacc.tapis.systems.client.gen.api.CredentialsApi;
import edu.utexas.tacc.tapis.systems.client.gen.api.GeneralApi;
import edu.utexas.tacc.tapis.systems.client.gen.api.PermissionsApi;
import edu.utexas.tacc.tapis.systems.client.gen.api.SchedulerProfilesApi;
import edu.utexas.tacc.tapis.systems.client.gen.api.SystemsApi;

import static edu.utexas.tacc.tapis.client.shared.Utils.DEFAULT_COMPUTETOTAL;
import static edu.utexas.tacc.tapis.client.shared.Utils.DEFAULT_LIMIT;
import static edu.utexas.tacc.tapis.client.shared.Utils.DEFAULT_ORDERBY;
import static edu.utexas.tacc.tapis.client.shared.Utils.DEFAULT_SEARCH;
import static edu.utexas.tacc.tapis.client.shared.Utils.DEFAULT_SELECT_ALL;
import static edu.utexas.tacc.tapis.client.shared.Utils.DEFAULT_SELECT_SUMMARY;
import static edu.utexas.tacc.tapis.client.shared.Utils.DEFAULT_SKIP;
import static edu.utexas.tacc.tapis.client.shared.Utils.DEFAULT_SKIP_CREDENTIAL_CHECK;
import static edu.utexas.tacc.tapis.client.shared.Utils.DEFAULT_STARTAFTER;

/**
 * Class providing a convenient front-end to the automatically generated client code
 * for the Systems Service REST API.
 * Underlying client classes with "gen" in the package name are generated by
 * openapi-generator each time a build is run.
 */
public class SystemsClient implements ITapisClient
{
  // ************************************************************************
  // *********************** Constants **************************************
  // ************************************************************************

  // Header key for JWT
  public static final String TAPIS_JWT_HEADER = "X-Tapis-Token";

  // Create a TypeToken to be used by gson for processing of LinkedTreeMap objects
  private static final Type linkedTreeMapType = new TypeToken<LinkedTreeMap<Object,Object>>(){}.getType();

  // Named values to make it clear what is being passed in to a method
  private static final String impersonationIdNull = null;
  private static final AuthnMethod authnMethodNull = null;
  private static final String sharedCtxNull = null;
  private static final String resourceTenantNull = null;
  private static final boolean returnCredentialsTrue = true;

  // Default values
  private static final AuthnMethod DEFAULT_AUTHN_METHOD = authnMethodNull;
  private static final boolean DEFAULT_REQUIRE_EXEC_PERM = false;
  private static final boolean DEFAULT_RETURN_CREDENTIALS = false;
  private static final boolean DEFAULT_SHOW_DELETED = false;
  private static final ListTypeEnum DEFAULT_LIST_TYPE_ENUM = ListTypeEnum.ALL;


  // ************************************************************************
  // *********************** Enums ******************************************
  // ************************************************************************
  // Define AuthnMethod here to be used in place of the auto-generated model enum
  //   because the auto-generated enum is named DefaultAuthnMethodEnum which is misleading.
  public enum AuthnMethod {PASSWORD, PKI_KEYS, ACCESS_KEY, CERT}

  // ************************************************************************
  // *********************** Fields *****************************************
  // ************************************************************************
  // Instance of the underlying autogenerated client.
  private final ApiClient apiClient;
  private final SystemsApi sysApi;
  private final ChildSystemsApi childSystemsApi;
  private final SchedulerProfilesApi schedulerProfilesApi;
  private final PermissionsApi permsApi;
  private final CredentialsApi credsApi;
  private final GeneralApi generalApi;

  // ************************************************************************
  // *********************** Constructors ***********************************
  // ************************************************************************

  /**
   * Default constructor which uses the compiled-in basePath based on the openapi spec
   *   used to autogenerate the client.
   */
  public SystemsClient()
  {
    apiClient = new ApiClient();
    sysApi = new SystemsApi(apiClient);
    schedulerProfilesApi = new SchedulerProfilesApi(apiClient);
    permsApi = new PermissionsApi(apiClient);
    credsApi = new CredentialsApi(apiClient);
    generalApi = new GeneralApi(apiClient);
    childSystemsApi = new ChildSystemsApi(apiClient);
  }

  /**
   * Constructor that overrides the compiled-in basePath value in ApiClient.
   * The path should include the URL prefix up to and including the service root.
   * In production environments the protocol should be https and the host/port will
   * be specific to that environment.
   *
   * @param path the base path URL prefix up to and including the service root
   * @param jwt the token to set in an HTTP header
   */
  public SystemsClient(String path, String jwt)
  {
    apiClient = new ApiClient();
    if (!StringUtils.isBlank(path)) apiClient.setBasePath(path);
    if (!StringUtils.isBlank(jwt)) apiClient.addDefaultHeader(TAPIS_JWT_HEADER, jwt);
    sysApi = new SystemsApi(apiClient);
    schedulerProfilesApi = new SchedulerProfilesApi(apiClient);
    permsApi = new PermissionsApi(apiClient);
    credsApi = new CredentialsApi(apiClient);
    generalApi = new GeneralApi(apiClient);
    childSystemsApi = new ChildSystemsApi(apiClient);
  }

  // ************************************************************************
  // *********************** Public Methods *********************************
  // ************************************************************************

  // getApiClient: Return underlying ApiClient
  public ApiClient getApiClient() { return apiClient; }

  // Update base path for default client.
  public String getBasePath() { return apiClient.getBasePath(); }

  // Update base path for default client.
  public SystemsClient setBasePath(String basePath) { apiClient.setBasePath(basePath); return this;}

  // Add http header to default client
  public SystemsClient addDefaultHeader(String key, String val) { apiClient.addDefaultHeader(key, val); return this;}

  /**
   *  Close connections and stop threads that can sometimes prevent JVM shutdown.
   */
  public void close()
  {
    try {
      // Best effort attempt to shut things down.
      var okClient = apiClient.getHttpClient();
      if (okClient != null)
      {
        var pool = okClient.connectionPool();
        if (pool != null) pool.evictAll();
      }
    } catch (Exception e) {}
  }

  // -----------------------------------------------------------------------
  // ------------------------- Systems -------------------------------------
  // -----------------------------------------------------------------------

  /**
   * Check service health status
   *
   * @return Service health status as a string
   * @throws TapisClientException - If api call throws an exception
   */
  public String checkHealth() throws TapisClientException
  {
    // Submit the request and return the response
    RespBasic resp = null;
    try { resp = generalApi.healthCheck(); }
    catch (ApiException e) { Utils.throwTapisClientException(e.getCode(), e.getResponseBody(), e); }
    catch (Exception e) { Utils.throwTapisClientException(-1, null, e); }
    if (resp != null && resp.getResult() != null) return resp.getStatus(); else return null;
  }

  /**
   * Check service ready status
   *
   * @return Service ready status as a string
   * @throws TapisClientException - If api call throws an exception
   */
  public String checkReady() throws TapisClientException
  {
    // Submit the request and return the response
    RespBasic resp = null;
    try { resp = generalApi.readyCheck(); }
    catch (ApiException e) { Utils.throwTapisClientException(e.getCode(), e.getResponseBody(), e); }
    catch (Exception e) { Utils.throwTapisClientException(-1, null, e); }
    if (resp != null && resp.getResult() != null) return resp.getStatus(); else return null;
  }

  /**
   * Create a system
   * See the helper method buildReqPostSystem() for an example of how to build a pre-populated
   *   ReqPostSystem instance from a TapisSystem instance.
   *
   * @param req - Pre-populated ReqPostSystem instance
   * @return url pointing to created resource
   * @throws TapisClientException - If api call throws an exception
   */
  public String createSystem(ReqPostSystem req) throws TapisClientException
  {
    return createSystem(req, DEFAULT_SKIP_CREDENTIAL_CHECK);
  }

  /**
   * Create a system
   * See the helper method buildReqPostSystem() for an example of how to build a pre-populated
   *   ReqPostSystem instance from a TapisSystem instance.
   *
   * @param req - Pre-populated ReqPostSystem instance
   * @return url pointing to created resource
   * @throws TapisClientException - If api call throws an exception
   */
  public String createSystem(ReqPostSystem req, boolean skipCredCheck) throws TapisClientException
  {
    // Submit the request and return the response
    RespResourceUrl resp = null;
    try { resp = sysApi.createSystem(req, skipCredCheck); }
    catch (ApiException e) { Utils.throwTapisClientException(e.getCode(), e.getResponseBody(), e); }
    catch (Exception e) { Utils.throwTapisClientException(-1, null, e); }
    if (resp != null && resp.getResult() != null) return resp.getResult().getUrl(); else return null;
  }

  /**
   * Update selected attributes of a system
   *
   * @param systemId - Id of resource to be updated
   * @param req - Pre-populated ReqPatchSystem instance
   * @return url pointing to updated resource
   * @throws TapisClientException - If api call throws an exception
   */
  public String patchSystem(String systemId, ReqPatchSystem req) throws TapisClientException
  {
    // Submit the request and return the response
    RespResourceUrl resp = null;
    try { resp = sysApi.patchSystem(systemId, req); }
    catch (ApiException e) { Utils.throwTapisClientException(e.getCode(), e.getResponseBody(), e); }
    catch (Exception e) { Utils.throwTapisClientException(-1, null, e); }
    if (resp != null && resp.getResult() != null) return resp.getResult().getUrl(); else return null;
  }

  /**
   * Update all attributes of a system
   * NOTE: Not all attributes are updatable.
   * See the helper method buildReqPutSystem() for an example of how to build a pre-populated
   *   ReqPutSystem instance from a TapisSystem instance.
   *
   * @param systemId - Id of resource to be updated
   * @param req - Pre-populated ReqPutSystem instance
   * @return url pointing to updated resource
   * @throws TapisClientException - If api call throws an exception
   */
  public String putSystem(String systemId, ReqPutSystem req) throws TapisClientException
  {
    return putSystem(systemId, req, DEFAULT_SKIP_CREDENTIAL_CHECK);
  }

  /**
   * Update all attributes of a system
   * NOTE: Not all attributes are updatable.
   * See the helper method buildReqPutSystem() for an example of how to build a pre-populated
   *   ReqPutSystem instance from a TapisSystem instance.
   *
   * @param systemId - Id of resource to be updated
   * @param req - Pre-populated ReqPutSystem instance
   * @return url pointing to updated resource
   * @throws TapisClientException - If api call throws an exception
   */
  public String putSystem(String systemId, ReqPutSystem req, boolean skipCredCheck) throws TapisClientException
  {
    // Submit the request and return the response
    RespResourceUrl resp = null;
    try { resp = sysApi.putSystem(systemId, req, skipCredCheck); }
    catch (ApiException e) { Utils.throwTapisClientException(e.getCode(), e.getResponseBody(), e); }
    catch (Exception e) { Utils.throwTapisClientException(-1, null, e); }
    if (resp != null && resp.getResult() != null) return resp.getResult().getUrl(); else return null;
  }

  /**
   * Update enabled attribute to true.
   *
   * @param id System id
   * @return number of records modified as a result of the action
   * @throws TapisClientException - If api call throws an exception
   */
  public int enableSystem(String id) throws TapisClientException
  {
    RespChangeCount resp = null;
    try { resp = sysApi.enableSystem(id); }
    catch (ApiException e) { Utils.throwTapisClientException(e.getCode(), e.getResponseBody(), e); }
    catch (Exception e) { Utils.throwTapisClientException(-1, null, e); }
    if (resp != null && resp.getResult() != null && resp.getResult().getChanges() != null) return resp.getResult().getChanges();
    else return -1;
  }

  /**
   * Update enabled attribute to false.
   *
   * @param id System id
   * @return number of records modified as a result of the action
   * @throws TapisClientException - If api call throws an exception
   */
  public int disableSystem(String id) throws TapisClientException
  {
    RespChangeCount resp = null;
    try { resp = sysApi.disableSystem(id); }
    catch (ApiException e) { Utils.throwTapisClientException(e.getCode(), e.getResponseBody(), e); }
    catch (Exception e) { Utils.throwTapisClientException(-1, null, e); }
    if (resp != null && resp.getResult() != null && resp.getResult().getChanges() != null) return resp.getResult().getChanges();
    else return -1;
  }

  /**
   * Update deleted attribute to true.
   *
   * @param id System id
   * @return number of records modified as a result of the action
   * @throws TapisClientException - If api call throws an exception
   */
  public int deleteSystem(String id) throws TapisClientException
  {
    RespChangeCount resp = null;
    try { resp = sysApi.deleteSystem(id); }
    catch (ApiException e) { Utils.throwTapisClientException(e.getCode(), e.getResponseBody(), e); }
    catch (Exception e) { Utils.throwTapisClientException(-1, null, e); }
    if (resp != null && resp.getResult() != null && resp.getResult().getChanges() != null) return resp.getResult().getChanges();
    else return -1;
  }

  /**
   * Update deleted to false.
   *
   * @param id System id
   * @return number of records modified as a result of the action
   * @throws TapisClientException - If api call throws an exception
   */
  public int undeleteSystem(String id) throws TapisClientException
  {
    RespChangeCount resp = null;
    try { resp = sysApi.undeleteSystem(id); }
    catch (ApiException e) { Utils.throwTapisClientException(e.getCode(), e.getResponseBody(), e); }
    catch (Exception e) { Utils.throwTapisClientException(-1, null, e); }
    if (resp != null && resp.getResult() != null && resp.getResult().getChanges() != null) return resp.getResult().getChanges();
    else return -1;
  }

  /**
   * Change system owner given the system systemId and new owner systemId.
   *
   * @param systemId System Id
   * @param newOwnerId User Id of new owner
   * @return number of records modified as a result of the action
   * @throws TapisClientException - If api call throws an exception
   */
  public int changeSystemOwner(String systemId, String newOwnerId) throws TapisClientException
  {
    RespChangeCount resp = null;
    try { resp = sysApi.changeSystemOwner(systemId, newOwnerId); }
    catch (ApiException e) { Utils.throwTapisClientException(e.getCode(), e.getResponseBody(), e); }
    catch (Exception e) { Utils.throwTapisClientException(-1, null, e); }
    if (resp != null && resp.getResult() != null && resp.getResult().getChanges() != null) return resp.getResult().getChanges();
    else return -1;
  }

  /**
   * Unlink a child system from a parent.  This makes the child system a standalone system.
   * unlinkChild and unlinkFromParent are identical in that they each make a childSystem become a standalone
   * system.  The difference is in the authorization.  unlinkFromParent requires access to the child.  unlinkChild
   * requires access to the parent.
   * @param childSystemId - id of the child system to unlink
   * @return  number of records modified as a result of the action
   * @throws TapisClientException - If api call throws an exception
   */
  public int unlinkFromParent(String childSystemId) throws TapisClientException {
    RespChangeCount resp = null;
    try { resp = childSystemsApi.unlinkFromParent(childSystemId); }
    catch (ApiException e) { Utils.throwTapisClientException(e.getCode(), e.getResponseBody(), e); }
    catch (Exception e) { Utils.throwTapisClientException(-1, null, e); }
    if (resp != null && resp.getResult() != null && resp.getResult().getChanges() != null) return resp.getResult().getChanges();
    else return -1;
  }

 /**
   * Unlink a child system from a parent.  This makes the child system a standalone system.
   * unlinkChild and unlinkFromParent are identical in that they each make a childSystem become a standalone
   * system.  The difference is in the authorization.  unlinkFromParent requires access to the child.  unlinkChild
   * requires access to the parent.
   *
   * @param parentSystemId - id of the parent of the child system to unlink
   * @param unlinkAll - set to true to unlink all children from the parent.  If this is set to true, the
   *                  list of child ids is ignored.
   * @param unlinkChildrenRequest - ids of the child systems to unlink (ignored if unlinkAll is true)
   * @return  number of records modified as a result of the action
   * @throws TapisClientException - If api call throws an exception
   */
  public int unlinkChildren(String parentSystemId, boolean unlinkAll, ReqUnlinkChildren unlinkChildrenRequest) throws TapisClientException {
    RespChangeCount resp = null;
    try { resp = childSystemsApi.unlinkChildren(parentSystemId, unlinkAll, unlinkChildrenRequest); }
    catch (ApiException e) { Utils.throwTapisClientException(e.getCode(), e.getResponseBody(), e); }
    catch (Exception e) { Utils.throwTapisClientException(-1, null, e); }
    if (resp != null && resp.getResult() != null && resp.getResult().getChanges() != null) return resp.getResult().getChanges();
    else return -1;
  }

  /**
   * Creates a child system from a parent systme.  The parent must have enabled child systems.
   * @param parentSystemId - the id of the parent system
   * @param request - Pre-populated ReqPostSystem instance
   * @return url pointing to created resource
   * @throws TapisClientException - If api call throws an exception
   */
  public String createChildSystem(String parentSystemId, ReqPostChildSystem request) throws TapisClientException {
    // Submit the request and return the response
    RespResourceUrl resp = null;
    try { resp = childSystemsApi.createChildSystem(parentSystemId, request); }
    catch (ApiException e) { Utils.throwTapisClientException(e.getCode(), e.getResponseBody(), e); }
    catch (Exception e) { Utils.throwTapisClientException(-1, null, e); }
    if (resp != null && resp.getResult() != null) return resp.getResult().getUrl(); else return null;
  }

  /**
   * Get a system by systemId using default arguments.
   *  authnMethod = null
   *  requireExec = false
   *  select = ALL
   *  returnCreds = false
   *  impersonationId = null
   *  sharedCtx = null
   *
   * Attributes named *notes* contain free form json and are represented as java Object type in generated TapisSystem class.
   * Client code converts all *notes* attributes to String type, so each *notes* Object can safely be cast to String.
   *
   * @param systemId System systemId
   * @return The system or null if system not found
   * @throws TapisClientException - If api call throws an exception
   */
  public TapisSystem getSystem(String systemId) throws TapisClientException
  {
    return getSystem(systemId, DEFAULT_AUTHN_METHOD, DEFAULT_REQUIRE_EXEC_PERM, DEFAULT_SELECT_ALL,
                     DEFAULT_RETURN_CREDENTIALS, impersonationIdNull, sharedCtxNull, resourceTenantNull);
  }

  /**
   * Get a system by systemId returning credentials for default authn method.
   * Use of this method is restricted. Only certain Tapis services are authorized to call this method.
   *
   * Attributes named *notes* contain free form json and are represented as java Object type in generated TapisSystem class.
   * Client code converts all *notes* attributes to String type, so each *notes* Object can safely be cast to String.
   *
   * @param systemId System Id
   * @return The system or null if system not found
   * @throws TapisClientException - If api call throws an exception
   */
  public TapisSystem getSystemWithCredentials(String systemId) throws TapisClientException
  {
    return getSystem(systemId, DEFAULT_AUTHN_METHOD, DEFAULT_REQUIRE_EXEC_PERM, DEFAULT_SELECT_ALL,
                     returnCredentialsTrue, impersonationIdNull, sharedCtxNull, resourceTenantNull);
  }

  // Simple wrapper for backward compatibility.
  public TapisSystem getSystem(String systemId, AuthnMethod authnMethod, boolean requireExecPerm, String selectStr,
                               boolean returnCredentials, String impersonationId, String sharedCtx)
          throws TapisClientException
  {
    return getSystem(systemId, authnMethod, requireExecPerm, selectStr, returnCredentials, impersonationId, sharedCtx,
                     resourceTenantNull);
  }

  /**
   * Get a system using all supported parameters.
   *
   * Only certain Tapis services are authorized to use
   *    returnCredentials = true, impersonationId != null or sharedCtx = application grantor
   *
   * If authnMethod is null then default authn method for the system is used.
   * If selectStr is null or empty then all attributes are selected.
   *
   * Attributes named *notes* contain free form json and are represented as java Object type in generated TapisSystem class.
   * Client code converts all *notes* attributes to String type, so each *notes* Object can safely be cast to String.
   *
   * @param systemId System Id
   * @param authnMethod - Desired authn method used when fetching credentials, for default pass in null.
   * @param requireExecPerm Check for EXECUTE permission as well as READ permission
   * @param selectStr - Attributes to be included in result. For example select=id,owner,host
   * @param returnCredentials - Include credentials in returned system object
   * @param impersonationId - use provided Tapis username instead of oboUser when checking auth and
   *                          resolving effectiveUserId
   * @param sharedCtx - Indicates system will be used as part of a shared application context.
   *                       Tapis authorization will be skipped.
   * @return The system or null if system not found
   * @throws TapisClientException - If api call throws an exception
   */
  public TapisSystem getSystem(String systemId, AuthnMethod authnMethod, boolean requireExecPerm, String selectStr,
                               boolean returnCredentials, String impersonationId, String sharedCtx, String resourceTenant)
          throws TapisClientException
  {
    String selectStr1 = DEFAULT_SELECT_ALL;
    if (!StringUtils.isBlank(selectStr)) selectStr1 = selectStr;
    RespSystem resp = null;
    String authnMethodStr = (authnMethod==null ? null : authnMethod.name());
    try
    {
      resp = sysApi.getSystem(systemId, authnMethodStr, requireExecPerm, selectStr1, returnCredentials,
                              impersonationId, sharedCtx, resourceTenant);
    }
    catch (ApiException e) { Utils.throwTapisClientException(e.getCode(), e.getResponseBody(), e); }
    catch (Exception e) { Utils.throwTapisClientException(-1, null, e); }
    if (resp == null || resp.getResult() == null) return null;
    // Postprocess the TapisSystem
    return postProcessSystem(resp.getResult());
  }

  /**
   * Get list of all systems
   *
   * Attributes named *notes* contain free form json and are represented as java Object type in generated TapisSystem class.
   * Client code converts all *notes* attributes to String type, so each *notes* Object can safely be cast to String.
   *
   * @return List of all systems available to the caller.
   * @throws TapisClientException - If api call throws an exception
   */
  public List<TapisSystem> getSystems() throws TapisClientException
  {
    return getSystems(DEFAULT_SEARCH);
  }

  /**
   * Get list of systems using search. For example search=(id.like.MySys*)~(enabled.eq.true)
   *
   * Attributes named *notes* contain free form json and are represented as java Object type in generated TapisSystem class.
   * Client code converts all *notes* attributes to String type, so each *notes* Object can safely be cast to String.
   *
   * @param searchStr list of conditions used for searching
   * @return list of systems available to the caller and matching search conditions.
   * @throws TapisClientException - If api call throws an exception
   */
  public List<TapisSystem> getSystems(String searchStr) throws TapisClientException
  {
    return getSystems(searchStr, DEFAULT_LIMIT, DEFAULT_ORDERBY, DEFAULT_SKIP, DEFAULT_STARTAFTER,
                      DEFAULT_SELECT_SUMMARY, DEFAULT_SHOW_DELETED);
  }


  /*
   * Get systems using all supported parameters except listType. For backward compatibility
   */
  public List<TapisSystem> getSystems(String searchStr, int limit, String orderBy, int skip, String startAfter,
                                      String selectStr, boolean showDeleted)
          throws TapisClientException
  {
    return getSystems(searchStr, DEFAULT_LIST_TYPE_ENUM, limit, orderBy, skip, startAfter, selectStr, showDeleted);
  }

  /**
   * Get list of systems using all supported parameters: searchStr, limit, orderBy, skip, startAfter, select, showDeleted
   * For example search=(id.like.MySys*)~(enabled.eq.true)&limit=10&orderBy=id(asc)&startAfter=my.sys1
   * Use only one of skip or startAfter
   * When using startAfter orderBy must be specified.
   *
   * Attributes named *notes* contain free form json and are represented as java Object type in generated TapisSystem class.
   * Client code converts all *notes* attributes to String type, so each *notes* Object can safely be cast to String.
   *
   * @param searchStr list of conditions used for searching
   * @param listTypeEnum - allows for filtering results based on authorization: OWNED, SHARED_PUBLIC, ALL
   * @param limit - indicates maximum number of results to be included, -1 for unlimited
   * @param orderBy - orderBy entries for sorting, e.g. orderBy=created(desc).
   * @param skip - number of results to skip (may not be used with startAfter)
   * @param startAfter - where to start when sorting, e.g. limit=10&orderBy=id(asc)&startAfter=101 (may not be used with skip)
   * @param selectStr - List of attributes to be included as part of each result item.
   * @param showDeleted - whether to included resources that have been marked as deleted.
   * @return list of systems available to the caller and matching search conditions.
   * @throws TapisClientException - If api call throws an exception
   */
  public List<TapisSystem> getSystems(String searchStr, ListTypeEnum listTypeEnum, int limit, String orderBy, int skip, String startAfter,
                                      String selectStr, boolean showDeleted)
          throws TapisClientException
  {
    String selectStr1 = DEFAULT_SELECT_SUMMARY;
    if (!StringUtils.isBlank(selectStr)) selectStr1 = selectStr;
    RespSystems resp = null;
    try
    {
      resp = sysApi.getSystems(searchStr, listTypeEnum, limit, orderBy, skip, startAfter, DEFAULT_COMPUTETOTAL,
                               selectStr1, showDeleted);
    }
    catch (ApiException e) { Utils.throwTapisClientException(e.getCode(), e.getResponseBody(), e); }
    catch (Exception e) { Utils.throwTapisClientException(-1, null, e); }
    if (resp == null || resp.getResult() == null) return Collections.emptyList();
    // Postprocess TapisSystems in the result
    for (TapisSystem tSys : resp.getResult()) postProcessSystem(tSys);
    return resp.getResult();
  }

  /**
   * Dedicated search endpoint using all supported parameters
   * Search for systems using an array of strings that represent an SQL-like WHERE clause
   * and using query parameters for sorting.
   * For example limit=10&orderBy=id(asc)&startAfter=my.sys1
   * Use only one of skip or startAfter
   * When using startAfter orderBy must be specified.
   *
   * Attributes named *notes* contain free form json and are represented as java Object type in generated TapisSystem class.
   * Client code converts all *notes* attributes to String type, so each *notes* Object can safely be cast to String.
   *
   * @return list of systems available to the caller and matching search conditions.
   * @throws TapisClientException - If api call throws an exception
   */
  public List<TapisSystem> searchSystems(ReqSearchSystems req, ListTypeEnum listTypeEnum, int limit, String orderBy,
                                         int skip, String startAfter,                                         String selectStr)
          throws TapisClientException
  {
    String selectStr1 = DEFAULT_SELECT_SUMMARY;
    if (!StringUtils.isBlank(selectStr)) selectStr1 = selectStr;
    RespSystems resp = null;
    try { resp = sysApi.searchSystemsRequestBody(req, listTypeEnum, limit, orderBy, skip, startAfter,
                                                 DEFAULT_COMPUTETOTAL, selectStr1); }
    catch (ApiException e) { Utils.throwTapisClientException(e.getCode(), e.getResponseBody(), e); }
    catch (Exception e) { Utils.throwTapisClientException(-1, null, e); }
    if (resp == null || resp.getResult() == null || resp.getResult() == null) return Collections.emptyList();
    // Postprocess TapisSystems in the result
    for (TapisSystem tSys : resp.getResult()) postProcessSystem(tSys);
    return resp.getResult();
  }

  /**
   * Dedicated search endpoint using requestBody only
   * Search for systems using an array of strings that represent an SQL-like WHERE clause
   *
   * Attributes named *notes* contain free form json and are represented as java Object type in generated TapisSystem class.
   * Client code converts all *notes* attributes to String type, so each *notes* Object can safely be cast to String.
   *
   * @param req Request body containing an array of strings representing an SQL-like WHERE clause.
   * @return list of systems available to the caller and matching search conditions.
   * @throws TapisClientException - If api call throws an exception
   */
  public List<TapisSystem> searchSystems(ReqSearchSystems req) throws TapisClientException
  {
    return searchSystems(req, DEFAULT_LIST_TYPE_ENUM, DEFAULT_LIMIT, DEFAULT_ORDERBY, DEFAULT_SKIP, DEFAULT_STARTAFTER,
                         DEFAULT_SELECT_SUMMARY);
  }

  /**
   * Dedicated search endpoint for retrieving systems that match a list of constraint conditions
   * The constraint conditions are passed in as an array of strings that represent an SQL-like WHERE clause
   */
  public List<TapisSystem> matchConstraints(ReqMatchConstraints req) throws TapisClientException
  {
    RespSystems resp = null;
    try { resp = sysApi.matchConstraints(req); }
    catch (ApiException e) { Utils.throwTapisClientException(e.getCode(), e.getResponseBody(), e); }
    catch (Exception e) { Utils.throwTapisClientException(-1, null, e); }
    if (resp == null || resp.getResult() == null) return Collections.emptyList();
    // Postprocess TapisSystems in the result
    for (TapisSystem tSys : resp.getResult()) postProcessSystem(tSys);
    return resp.getResult();
  }

  /**
   * Check if resource is enabled
   *
   * @param systemId System Id
   * @return boolean indicating if enabled
   * @throws TapisClientException - If api call throws an exception
   */
  public boolean isEnabled(String systemId) throws TapisClientException
  {
    // Submit the request and return the response
    RespBoolean resp = null;
    try { resp = sysApi.isEnabled(systemId); }
    catch (ApiException e) { Utils.throwTapisClientException(e.getCode(), e.getResponseBody(), e); }
    catch (Exception e) { Utils.throwTapisClientException(-1, null, e); }
    if (resp != null && resp.getResult() != null)
    {
      return resp.getResult().getaBool();
    }
    else
    {
      throw new TapisClientException("isEnabled did not return a result");
    }
  }


  // -----------------------------------------------------------------------
  // --------------------------- Permissions -------------------------------
  // -----------------------------------------------------------------------

  /**
   * Grant permissions for given system and user.
   *
   * @param systemId System Id
   * @param userName Id of user
   * @param permissions list of permissions to grant.
   * @throws TapisClientException - If api call throws an exception
   */
  public void grantUserPermissions(String systemId, String userName, List<String> permissions)
          throws TapisClientException
  {
    // Build the request
    var req = new ReqPerms();
    req.setPermissions(permissions);
    // Submit the request
    try { permsApi.grantUserPerms(systemId, userName, req); }
    catch (ApiException e) { Utils.throwTapisClientException(e.getCode(), e.getResponseBody(), e); }
    catch (Exception e) { Utils.throwTapisClientException(-1, null, e); }
  }

  /**
   * Get list of permissions for given system and user.
   *
   * @param systemId System Id
   * @param userName Id of user
   * @throws TapisClientException - If api call throws an exception
   */
  public List<String> getSystemPermissions(String systemId, String userName) throws TapisClientException
  {
    RespNameArray resp = null;
    try { resp = permsApi.getUserPerms(systemId, userName); }
    catch (ApiException e) { Utils.throwTapisClientException(e.getCode(), e.getResponseBody(), e); }
    catch (Exception e) { Utils.throwTapisClientException(-1, null, e); }
    if (resp != null && resp.getResult() != null)
    {
      return resp.getResult().getNames();
    }
    else
    {
      return Collections.emptyList();
    }
  }

  /**
   * Revoke permissions for given system and user.
   *
   * @param systemId System Id
   * @param userName Id of user
   * @param permissions list of permissions to revoke.
   * @throws TapisClientException - if api call throws an exception
   */
  public void revokeUserPermissions(String systemId, String userName, List<String> permissions)
          throws TapisClientException
  {
    // Build the request
    var req = new ReqPerms();
    req.setPermissions(permissions);
    // Submit the request
    try { permsApi.revokeUserPerms(systemId, userName, req); }
    catch (ApiException e) { Utils.throwTapisClientException(e.getCode(), e.getResponseBody(), e); }
    catch (Exception e) { Utils.throwTapisClientException(-1, null, e); }
  }

  /**
   * Revoke single permission for given system and user.
   *
   * @param systemId System Id
   * @param permission permission to revoke
   * @param userName Id of user
   * @throws TapisClientException - If api call throws an exception
   */
  public void revokeUserPermission(String systemId, String userName, String permission) throws TapisClientException
  {
    // Submit the request
    try { permsApi.revokeUserPerm(systemId, userName, permission); }
    catch (ApiException e) { Utils.throwTapisClientException(e.getCode(), e.getResponseBody(), e); }
    catch (Exception e) { Utils.throwTapisClientException(-1, null, e); }
  }

  // -----------------------------------------------------------------------
  // ---------------------------- Credentials ------------------------------
  // -----------------------------------------------------------------------

  /**
   * Create or update credential for given system and user.
   *
   * @param systemId System Id
   * @param userName Id of user
   * @param req Request containing credentials (password, keys, etc).
   * @throws TapisClientException - If api call throws an exception
   */
  public void updateUserCredential(String systemId, String userName, ReqUpdateCredential req) throws TapisClientException
  {
    updateUserCredential(systemId, userName, req, DEFAULT_SKIP_CREDENTIAL_CHECK);
  }

  /**
   * Create or update credential for given system and user.
   *
   * @param systemId System Id
   * @param userName Id of user
   * @param req Request containing credentials (password, keys, etc).
   * @throws TapisClientException - If api call throws an exception
   */
  public void updateUserCredential(String systemId, String userName, ReqUpdateCredential req, boolean skipCredCheck) throws TapisClientException
  {
    // Submit the request
    try { credsApi.createUserCredential(systemId, userName, req, skipCredCheck); }
    catch (ApiException e) { Utils.throwTapisClientException(e.getCode(), e.getResponseBody(), e); }
    catch (Exception e) { Utils.throwTapisClientException(-1, null, e); }
  }

  /**
   * Retrieve credential for given system, user and authn method.
   * If authn method is null return credential for default authn method defined for the system.
   *
   * @param systemId System Id
   * @param userName Id of user
   * @param authnMethod - Desired authn method used when fetching credentials, for default pass in null.
   * @throws TapisClientException - If api call throws an exception
   */
  public Credential getUserCredential(String systemId, String userName, AuthnMethod authnMethod)
          throws TapisClientException
  {
    RespCredential resp = null;
    String authnMethodStr = (authnMethod==null ? null : authnMethod.name());
    try {resp = credsApi.getUserCredential(systemId, userName, authnMethodStr); }
    catch (ApiException e) { Utils.throwTapisClientException(e.getCode(), e.getResponseBody(), e); }
    catch (Exception e) { Utils.throwTapisClientException(-1, null, e); }
    if (resp != null) return resp.getResult(); else return null;
  }

  /**
   * Retrieve a credential for given system and user for the default authn method defined for the system
   *
   * @param systemId System Id
   * @param userName Id of user
   * @throws TapisClientException - If api call throws an exception
   */
  public Credential getUserCredential(String systemId, String userName) throws TapisClientException
  {
    return getUserCredential(systemId, userName, null);
  }

  /**
   * Delete credential for given system and user.
   *
   * @param systemId System Id
   * @param userName Id of user
   * @throws TapisClientException - if api call throws an exception
   */
  public void deleteUserCredential(String systemId, String userName)
          throws TapisClientException
  {
    // Submit the request
    try { credsApi.removeUserCredential(systemId, userName); }
    catch (ApiException e) { Utils.throwTapisClientException(e.getCode(), e.getResponseBody(), e); }
    catch (Exception e) { Utils.throwTapisClientException(-1, null, e); }
  }

  // -----------------------------------------------------------------------
  // ------------------------ Scheduler Profiles ---------------------------
  // -----------------------------------------------------------------------

  /**
   * Create a scheduler profile
   * See the helper method buildReqPostSchedulerProfile() for an example of how to build a pre-populated
   *   ReqPostSchedulerProfile instance from a SchedulerProfile instance.
   *
   * @param req - Pre-populated ReqPostSchedulerProfile instance
   * @return url pointing to created resource
   * @throws TapisClientException - If api call throws an exception
   */
  public String createSchedulerProfile(ReqPostSchedulerProfile req) throws TapisClientException
  {
    // Submit the request and return the response
    RespResourceUrl resp = null;
    try { resp = schedulerProfilesApi.createSchedulerProfile(req); }
    catch (ApiException e) { Utils.throwTapisClientException(e.getCode(), e.getResponseBody(), e); }
    catch (Exception e) { Utils.throwTapisClientException(-1, null, e); }
    if (resp != null && resp.getResult() != null) return resp.getResult().getUrl(); else return null;
  }

  /**
   * Get a scheduler profile.
   *
   * @param name profile name
   * @return The scheduler profile or null if not found
   * @throws TapisClientException - If api call throws an exception
   */
  public SchedulerProfile getSchedulerProfile(String name) throws TapisClientException
  {
    RespSchedulerProfile resp = null;
    try {resp = schedulerProfilesApi.getSchedulerProfile(name); }
    catch (ApiException e) { Utils.throwTapisClientException(e.getCode(), e.getResponseBody(), e); }
    catch (Exception e) { Utils.throwTapisClientException(-1, null, e); }
    if (resp != null) return resp.getResult(); else return null;
  }

  /**
   * Get list of scheduler profiles
   *
   * @return list of all profiles.
   * @throws TapisClientException - If api call throws an exception
   */
  public List<SchedulerProfile> getSchedulerProfiles() throws TapisClientException
  {
    RespSchedulerProfiles resp = null;
    try
    {
      resp = schedulerProfilesApi.getSchedulerProfiles();
    }
    catch (ApiException e) { Utils.throwTapisClientException(e.getCode(), e.getResponseBody(), e); }
    catch (Exception e) { Utils.throwTapisClientException(-1, null, e); }
    if (resp == null || resp.getResult() == null) return Collections.emptyList();
    else return resp.getResult();
  }

  /**
   * Delete a scheduler profile.
   *
   * @param name - name of profile
   * @return number of records modified as a result of the action
   * @throws TapisClientException - If api call throws an exception
   */
  public int deleteSchedulerProfile(String name) throws TapisClientException
  {
    RespChangeCount resp = null;
    try { resp = schedulerProfilesApi.deleteSchedulerProfile(name); }
    catch (ApiException e) { Utils.throwTapisClientException(e.getCode(), e.getResponseBody(), e); }
    catch (Exception e) { Utils.throwTapisClientException(-1, null, e); }
    if (resp != null && resp.getResult() != null && resp.getResult().getChanges() != null) return resp.getResult().getChanges();
    else return -1;
  }

  // ************************************************************************
  // *********************** Utility Methods ********************************
  // ************************************************************************

  /**
   * Utility method to build a ReqPostSystem object using attributes from a TapisSystem.
   */
  public static ReqPostSystem buildReqPostSystem(TapisSystem sys)
  {
    if (sys == null) return null;
    var rSys = new ReqPostSystem();
    rSys.id(sys.getId());
    rSys.description(sys.getDescription());
    rSys.systemType(sys.getSystemType());
    rSys.owner(sys.getOwner());
    rSys.host(sys.getHost());
    rSys.enabled(sys.getEnabled());
    rSys.effectiveUserId(sys.getEffectiveUserId());
    rSys.defaultAuthnMethod(sys.getDefaultAuthnMethod());
    rSys.authnCredential(buildReqPostPutCredential(sys.getAuthnCredential()));
    rSys.bucketName(sys.getBucketName());
    rSys.rootDir(sys.getRootDir());
    rSys.port(sys.getPort()).useProxy(sys.getUseProxy()).proxyHost(sys.getProxyHost()).proxyPort(sys.getProxyPort());
    rSys.dtnSystemId(sys.getDtnSystemId());
    rSys.canExec(sys.getCanExec());
    rSys.jobRuntimes(sys.getJobRuntimes());
    rSys.jobWorkingDir(sys.getJobWorkingDir());
    rSys.jobEnvVariables(sys.getJobEnvVariables());
    rSys.jobMaxJobs(sys.getJobMaxJobs()).jobMaxJobsPerUser(sys.getJobMaxJobsPerUser());
    rSys.canRunBatch(sys.getCanRunBatch());
    rSys.mpiCmd(sys.getMpiCmd());
    rSys.batchScheduler(sys.getBatchScheduler());
    rSys.batchLogicalQueues(sys.getBatchLogicalQueues());
    rSys.batchDefaultLogicalQueue(sys.getBatchDefaultLogicalQueue());
    rSys.jobCapabilities(sys.getJobCapabilities());
    rSys.tags(sys.getTags());
    // Notes requires special handling. It must be null or a JsonObject
    Object notes = sys.getNotes();
    if (notes == null) rSys.notes(null);
    else if (notes instanceof String) rSys.notes(ClientTapisGsonUtils.getGson().fromJson((String) notes, JsonObject.class));
    else if (notes instanceof JsonObject) rSys.notes(notes);
    else rSys.notes(null);
    rSys.importRefId(sys.getImportRefId());
    return rSys;
  }

  /**
   * Utility method to build a ReqPutSystem object using attributes from a TapisSystem.
   */
  public static ReqPutSystem buildReqPutSystem(TapisSystem sys)
  {
    if (sys == null) return null;
    var rSys = new ReqPutSystem();
    rSys.description(sys.getDescription());
    rSys.host(sys.getHost());
    rSys.effectiveUserId(sys.getEffectiveUserId());
    rSys.defaultAuthnMethod(sys.getDefaultAuthnMethod());
    rSys.authnCredential(buildReqPostPutCredential(sys.getAuthnCredential()));
    rSys.port(sys.getPort()).useProxy(sys.getUseProxy()).proxyHost(sys.getProxyHost()).proxyPort(sys.getProxyPort());
    rSys.dtnSystemId(sys.getDtnSystemId());
    rSys.jobRuntimes(sys.getJobRuntimes());
    rSys.jobWorkingDir(sys.getJobWorkingDir());
    rSys.jobEnvVariables(sys.getJobEnvVariables());
    rSys.jobMaxJobs(sys.getJobMaxJobs()).jobMaxJobsPerUser(sys.getJobMaxJobsPerUser());
    rSys.canRunBatch(sys.getCanRunBatch());
    rSys.mpiCmd(sys.getMpiCmd());
    rSys.batchScheduler(sys.getBatchScheduler());
    rSys.batchLogicalQueues(sys.getBatchLogicalQueues());
    rSys.batchDefaultLogicalQueue(sys.getBatchDefaultLogicalQueue());
    rSys.jobCapabilities(sys.getJobCapabilities());
    rSys.tags(sys.getTags());
    // Notes requires special handling. It must be null or a JsonObject
    Object notes = sys.getNotes();
    if (notes == null) rSys.notes(null);
    else if (notes instanceof String) rSys.notes(ClientTapisGsonUtils.getGson().fromJson((String) notes, JsonObject.class));
    else if (notes instanceof JsonObject) rSys.notes(notes);
    else rSys.notes(null);
    rSys.importRefId(sys.getImportRefId());
    return rSys;
  }

  /**
   * Utility method to build a credential object given secrets.
   */
  public static Credential buildCredential(String password, String privateKey, String publicKey,
                                           String accessKey, String accessSecret, String certificate)
  {
    var cred = new Credential();
    cred.setPassword(password);
    cred.setPrivateKey(privateKey);
    cred.setPublicKey(publicKey);
    cred.setAccessKey(accessKey);
    cred.setAccessSecret(accessSecret);
    cred.setCertificate(certificate);
    return cred;
  }

  /**
   * Utility method to build a ReqPostPutCredential using attributes from a Credential.
   */
  public static ReqPostPutCredential buildReqPostPutCredential(Credential credential)
  {
    if (credential == null) return null;
    var rCred = new ReqPostPutCredential();
    rCred.password(credential.getPassword());
    rCred.publicKey(credential.getPublicKey());
    rCred.privateKey(credential.getPrivateKey());
    rCred.accessKey(credential.getAccessKey());
    rCred.accessSecret(credential.getAccessSecret());
    rCred.certificate(credential.getCertificate());
    return rCred;
  }

  /**
   * Utility method to build a ReqPostSchedulerProfile using attributes from a SchedulerProfile.
   */
  public static ReqPostSchedulerProfile buildReqPostSchedulerProfile(SchedulerProfile profile)
  {
    if (profile == null) return null;
    var rProfile = new ReqPostSchedulerProfile();
    rProfile.name(profile.getName());
    rProfile.description(profile.getDescription());
    rProfile.owner(profile.getOwner());
    rProfile.moduleLoads(profile.getModuleLoads());
    rProfile.hiddenOptions(profile.getHiddenOptions());
    return rProfile;
  }
  /**
   * Utility method to build a batch LogicalQueue
   */
  public static LogicalQueue buildLogicalQueue(String name, String hpcQueueName, int maxJobs, int maxJobsPerUser,
                                               int minNodeCount, int maxNodeCount, int minCoresPerNode, int maxCoresPerNode,
                                               int minMemoryMB, int maxMemoryMB, int minMinutes, int maxMinutes)
  {
    var q = new LogicalQueue();
    q.setName(name);
    q.setHpcQueueName(hpcQueueName);
    q.setMaxJobs(maxJobs);
    q.setMaxJobsPerUser(maxJobsPerUser);
    q.setMinNodeCount(minNodeCount);
    q.setMaxNodeCount(maxNodeCount);
    q.setMinCoresPerNode(minCoresPerNode);
    q.setMaxCoresPerNode(maxCoresPerNode);
    q.setMinMemoryMB(minMemoryMB);
    q.setMaxMemoryMB(maxMemoryMB);
    q.setMinMinutes(minMinutes);
    q.setMaxMinutes(maxMinutes);
    return q;
  }

  /**
   * Utility method to build a Capability object given category, name and value
   */
  public static Capability buildCapability(CategoryEnum category, String name,
                                           DatatypeEnum datatype, int precedence, String value)
  {
    var cap = new Capability();
    cap.setCategory(category);
    cap.setName(name);
    cap.setDatatype(datatype);
    cap.setPrecedence(precedence);
    cap.setValue(value);
    return cap;
  }

  /**
   * Utility method to map a SchedulerHiddenOptionEnum to the string used by the scheduler.
   * @param hiddenOptionEnum - Scheduler hidden option enum
   * @return String containing the option as expected by the batch scheduler. Empty string if no mapping found.
   */
  public static String getSchedulerHiddenOptionValue(SchedulerHiddenOptionEnum hiddenOptionEnum)
  {
    return switch (hiddenOptionEnum)
    {
      case MEM -> "--mem";
      default -> "";
    };
  }

  // ************************************************************************
  // *********************** Private Methods ********************************
  // ************************************************************************

  /**
   * Do any client side postprocessing of a returned system.
   * This involves transforming any notes attributes from a LinkedTreeMap into a json string.
   *
   * There is a top level notes attribute as well as a notes attribute for any jobEnvVariables
   * @param tSys - TapisSystem to process
   * @return - Resulting TapisSystem
   * @throws TapisClientException if notes object is not of type LinkedTreeMap
   */
  TapisSystem postProcessSystem(TapisSystem tSys) throws TapisClientException
  {
    // If no system, then we are done
    if (tSys == null) return tSys;
    String sysId = tSys.getId();

    // Convert top level notes if present.
    Object topNotes = tSys.getNotes();
    if (topNotes != null) tSys.setNotes(convertLinkedTreeMapToString(topNotes, sysId, "TopNotes"));

    // Now check for notes in jobEnvVariables
    List<KeyValuePair> envVars = tSys.getJobEnvVariables();
    if (envVars != null && !envVars.isEmpty())
    {
      for (KeyValuePair kvp : envVars)
      {
        if (kvp != null && kvp.getNotes() != null)
        {
          kvp.setNotes(convertLinkedTreeMapToString(kvp.getNotes(), sysId, "jobEnvVariable"));
        }
      }
    }
    return tSys;
  }

  /*
   * Convert a notes LinkedTreeMap to a json string.
   * If notes is not of type LinedTreeMap log an error and throw exception.
   */
  private static Object convertLinkedTreeMapToString(Object notes, String sysId, String notesLabel)
          throws TapisClientException
  {
    // We expect notes to be of type com.google.gson.internal.LinkedTreeMap. Make sure that is the case.
    if (!(notes instanceof LinkedTreeMap<?,?>))
    {
      // Log an error and throw exception
      String msg =
              String.format("ERROR: Notes attribute in system not of type LinkedTreeMap. System: %s. Where found: %s. Notes: %s",
                      sysId, notesLabel, notes);
      throw new TapisClientException(msg);
    }
    // Convert the gson LinkedTreeMap to a string.
    var lmap = (LinkedTreeMap<String, String>) notes;
    return  ClientTapisGsonUtils.getGson().toJson(lmap, linkedTreeMapType);
  }
 }
