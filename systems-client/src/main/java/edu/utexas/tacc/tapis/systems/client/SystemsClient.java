package edu.utexas.tacc.tapis.systems.client;

import java.util.List;

import org.apache.commons.lang3.StringUtils;

import com.google.gson.Gson;

import edu.utexas.tacc.tapis.shared.exceptions.TapisClientException;
import edu.utexas.tacc.tapis.shared.utils.TapisGsonUtils;
import edu.utexas.tacc.tapis.systems.client.gen.ApiClient;
import edu.utexas.tacc.tapis.systems.client.gen.ApiException;
import edu.utexas.tacc.tapis.systems.client.gen.Configuration;
import edu.utexas.tacc.tapis.systems.client.gen.api.SystemsApi;
import edu.utexas.tacc.tapis.systems.client.gen.model.*;

/**
 * Class providing a convenient front-end to the automatically generated client code
 * for the Systems Service REST API.
 * Underlying client classes with "gen" in the package name are generated by
 * openapi-generator each time a build is run.
 */
public class SystemsClient
{
  /* **************************************************************************** */
  /*                                   Constants                                  */
  /* **************************************************************************** */

  // Header key for JWT
  public static final String TAPIS_JWT_HEADER = "X-Tapis-Token";

  // Error msg to use in unlikely event we are unable to extract one from underlying exception
  private static final String ERR_MSG = SystemsClient.class.getSimpleName() +
              ": Exception encountered but unable extract message from response or underlying exception";

  /* **************************************************************************** */
  /*                                    Fields                                    */
  /* **************************************************************************** */
  // Response bosdy serializer
  private static final Gson gson = TapisGsonUtils.getGson();
  private SystemsApi sysApi;

  /* **************************************************************************** */
  /*                                 Constructors                                 */
  /* **************************************************************************** */

  public SystemsClient() { sysApi = new SystemsApi(); }

  /**
   * Constructor that overrides the compiled-in basePath value in ApiClient.  This
   * constructor is typically used in production.
   * <p>
   * The path includes the URL prefix up to and including the service root.  By
   * default this value is http://localhost/v3/systems.  In production environments
   * the protocol is https and the host/port will be specific to that environment.
   *
   * @param path the base path
   * @param jwt the token to set in an HTTP header
   */
  public SystemsClient(String path, String jwt)
  {
    ApiClient apiClient = Configuration.getDefaultApiClient();
    if (!StringUtils.isBlank(path)) apiClient.setBasePath(path);
    if (!StringUtils.isBlank(jwt)) apiClient.addDefaultHeader(TAPIS_JWT_HEADER, jwt);
    sysApi = new SystemsApi();
  }

  /* **************************************************************************** */
  /*                              Public Methods                                  */
  /* **************************************************************************** */

  /**
   * getApiClient: Return underlying ApiClient
   */
  public ApiClient getApiClient()
  {
    return Configuration.getDefaultApiClient();
  }

  /**
   * addDefaultHeader: Add http header to client
   */
  public ApiClient addDefaultHeader(String key, String val)
  {
    return Configuration.getDefaultApiClient().addDefaultHeader(key, val);
  }

  /**
   * Create a system
   *
   * @return url pointing to created resource
   * @throws TapisClientException
   */
  public String createSystem(String name, String description, String owner, String host, boolean available,
                             String bucketName, String rootDir, String jobInputDir, String jobOutputDir,
                             String workDir, String scratchDir, String effectiveUserId, String tags, String notes,
                             String accessCredential, String accessMechanism, List<String> transferMechanisms,
                             int port, boolean useProxy, String proxyHost, int proxyPort)
    throws TapisClientException
  {
    // Build the request
    var req = new ReqCreateSystem();
    req.setName(name);
    req.setDescription(description);
    req.setOwner(owner);
    req.setHost(host);
    req.setAvailable(available);
    req.setBucketName(bucketName);
    req.setRootDir(rootDir);
    req.setJobInputDir(jobInputDir);
    req.setJobOutputDir(jobOutputDir);
    req.setWorkDir(workDir);
    req.setScratchDir(scratchDir);
    req.setEffectiveUserId(effectiveUserId);
    req.setTags(tags);
    req.setNotes(notes);
    req.setAccessCredential(accessCredential);
    req.setAccessMechanism(accessMechanism);
    req.setTransferMechanisms(transferMechanisms);
    req.setPort(port);
    req.setUseProxy(useProxy);
    req.setProxyHost(proxyHost);
    req.setProxyPort(proxyPort);
    // Submit the request and return the response
    RespResourceUrl resp = null;
    try { resp = sysApi.createSystem(req, false); }
    catch (Exception e) { throwTapisClientException(e); }
    return resp.getResult().getUrl();
  }

  /**
   * Get a system by name.
   *
   * @param name
   * @param returnCredentials - Flag indicating if credentials should be included in result
   * @return The system or null if system not found
   * @throws TapisClientException
   */
  public TSystem getSystemByName(String name, boolean returnCredentials) throws TapisClientException
  {
    RespSystem resp = null;
    try {resp = sysApi.getSystemByName(name, false, returnCredentials); }
    catch (Exception e) { throwTapisClientException(e); }
    return resp.getResult();
  }

  /**
   * Get list of system names
   */
  public List<String> getSystemNames() throws TapisClientException
  {
    RespNameArray resp = null;
    try { resp = sysApi.getSystemNames(false); }
    catch (Exception e) { throwTapisClientException(e); }
    return resp.getResult().getNames();
  }

  /**
   * Get all systems
   */
//  public List<TSystem> getSystems() throws TapisClientException
//  {
//        RespNameArray resp = sysApi.getSystemNames(false);
//        return resp.getResult();
//    return Collections.emptyList();
//  }

  /**
   * Delete a system given the system name.
   * Return 1 if record was deleted
   * Return 0 if record not present
   *
   * @param name
   * @return number of records modified as a result of the action
   * @throws TapisClientException
   */
  public int deleteSystemByName(String name) throws TapisClientException
  {
    RespChangeCount resp = null;
    try { resp = sysApi.deleteSystemByName(name, false); }
    catch (Exception e) { throwTapisClientException(e); }
    return resp.getResult().getChanges();
  }



  /* **************************************************************************** */
  /*                               Private Methods                                */
  /* **************************************************************************** */

  /**
   * throwTapisClientException
   * Attempt to extract info from any exception thrown by ApiClient and wrap it in a TapisClientException.
   * This method always throws a TapisClientException
   *
   * @param e - Exception thrown by ApiClient, typically ApiException
   * @throws TapisClientException - Always thrown
   */
  private void throwTapisClientException(Exception e) throws TapisClientException
  {
    TapisResponse tapisResponse = null; // For storing results of parsed response body
    int code = 0; // Code from ApiException, e.g. 404 for not found
    String msg = null; // Top level message to put in final exception

    // If it is an ApiException then we should be able to extract info from response body
    // If it is not an ApiException then pass along message from the original Exception
    if (e instanceof ApiException) {
      var apiException = (ApiException) e;
      code = apiException.getCode();
      // Attempt to parse response body
      String respBody = apiException.getResponseBody();
      if (respBody != null)
        try {tapisResponse = gson.fromJson(respBody, TapisResponse.class);}
        catch (Exception e1) {msg = respBody;} // response body was not json, use it as top level msg
    }
    else msg = e.getMessage();

    // If top level msg is empty attempt to use msg from response body
    if (StringUtils.isBlank(msg))
    {
      if (tapisResponse != null) msg = tapisResponse.message;
      else msg = ERR_MSG;
    }

    // Create the client exception.
    var clientException = new TapisClientException(msg, e);

    // Fill in as many of the tapis client exception fields as possible.
    clientException.setCode(code);
    if (tapisResponse != null)
    {
      clientException.setStatus(tapisResponse.status);
      clientException.setTapisMessage(tapisResponse.message);
      clientException.setVersion(tapisResponse.version);
      clientException.setResult(tapisResponse.result);
    }
    // Throw the client exception.
    throw clientException;
  }

  /**
   * Class used when attempting to parse ResponseBody found in ApiException
   */
  private static final class TapisResponse
  {
    private String status;
    private String message;
    private String version;
    private Object result;
  }
}
