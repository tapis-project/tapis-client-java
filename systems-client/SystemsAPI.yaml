openapi: 3.0.1
info:
  title: Tapis Systems API
  description: 'The Tapis Systems API provides for management of Tapis Systems including access and transfer methods, permissions and credentials.'
  contact:
    name: CICSupport
    email: cicsupport@tacc.utexas.edu
  license:
    name: 3-Clause BSD License
    url: 'https://opensource.org/licenses/BSD-3-Clause'
  version: '0.1'
externalDocs:
  description: Tapis Home
  url: 'https://tacc-cloud.readthedocs.io/projects/agave'
servers:
  - url: /v3/systems
    description: Base URL
    variables: {}
security:
  - TapisJWT: []
tags:
  - name: systems
    description: manage systems
paths:
  '/v3/systems/credential/{systemName}/user/{userName}':
    get:
      tags:
        - credentials
      summary: Retrieve credential for given system and user
      description: Retrieve credential for given system and user. Requester must be owner of the system. Use query parameter accessMethod=<method> to override default access method.
      operationId: getUserCredential
      parameters:
        - name: systemName
          in: path
          required: true
          schema:
            type: string
        - name: userName
          in: path
          required: true
          schema:
            type: string
        - name: accessMethod
          in: query
          schema:
            type: string
            default: ''
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespCredential'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: System not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    post:
      tags:
        - credentials
      summary: Create or update access credential in the Security Kernel for given system and user
      description: Create or update access credential in the Security Kernel for given system and user using a request body.  Requester must be owner of the system.
      operationId: createUserCredential
      parameters:
        - name: systemName
          in: path
          required: true
          schema:
            type: string
        - name: userName
          in: path
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        description: A JSON object specifying a credential.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqCreateCredential'
        required: true
      responses:
        '200':
          description: Credential updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '400':
          description: Input error. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    delete:
      tags:
        - credentials
      summary: Remove credential in the Security Kernel for given system and user
      description: Remove credential from the Security Kernel for given system and user. Requester must be owner of the system.
      operationId: removeUserCredential
      parameters:
        - name: systemName
          in: path
          required: true
          schema:
            type: string
        - name: userName
          in: path
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Credential removed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '400':
          description: Input error. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/systems/perms/{systemName}/user/{userName}':
    get:
      tags:
        - permissions
      summary: Retrieve system related permissions for given system and user
      description: Retrieve all system related permissions for a given system and user.
      operationId: getUserPerms
      parameters:
        - name: systemName
          in: path
          required: true
          schema:
            type: string
        - name: userName
          in: path
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespNameArray'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: System not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    post:
      tags:
        - permissions
      summary: Create permissions in the Security Kernel giving a user access to a system
      description: 'Create permissions in the Security Kernel for a user using a request body. Requester must be owner of the system. Permissions: READ, MODIFY or ALL.'
      operationId: grantUserPerms
      parameters:
        - name: systemName
          in: path
          required: true
          schema:
            type: string
        - name: userName
          in: path
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        description: A JSON object specifying a list of permissions.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqPerms'
        required: true
      responses:
        '200':
          description: Permissions granted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '400':
          description: Input error. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/systems/perms/{systemName}/user/{userName}/{permission}':
    delete:
      tags:
        - permissions
      summary: Revoke specified permission in the Security Kernel
      description: 'Revoke permission in the Security Kernel for a user. Requester must be owner of the system. Permissions: READ, MODIFY or ALL.'
      operationId: revokeUserPerm
      parameters:
        - name: systemName
          in: path
          required: true
          schema:
            type: string
        - name: userName
          in: path
          required: true
          schema:
            type: string
        - name: permission
          in: path
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Permission revoked.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '400':
          description: Input error. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/systems/perms/{systemName}/user/{userName}/revoke':
    post:
      tags:
        - permissions
      summary: Revoke system permissions in the Security Kernel using request body
      description: 'Revoke permissions in the Security Kernel for a user using a request body. Requester must be owner of the system. Permissions: READ, MODIFY or ALL.'
      operationId: revokeUserPerms
      parameters:
        - name: systemName
          in: path
          required: true
          schema:
            type: string
        - name: userName
          in: path
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        description: A JSON object specifying a list of permissions.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqPerms'
        required: true
      responses:
        '200':
          description: Permission revoked.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/systems':
    get:
      tags:
        - systems
      summary: Retrieve list of system names
      description: Retrieve list of system names.
      operationId: getSystemNames
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespNameArray'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    post:
      tags:
        - systems
      summary: Create a system
      description: 'Create a system using a request body. System name must be unique within a tenant and can be composed of alphanumeric characters and the following special characters: [-._~]. Name must begin with an alphabetic character and can be no more than 256 characters in length. Description is optional with a maximum length of 2048 characters.'
      operationId: createSystem
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        description: A JSON object specifying information for the system to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqCreateSystem'
        required: true
      responses:
        '201':
          description: System created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '400':
          description: Input error. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '409':
          description: System already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/systems/{sysName}':
    get:
      tags:
        - systems
      summary: Retrieve information for a system
      description: Retrieve information for a system given the system name. Use query parameter returnCredentials=true to have effectiveUserId access credentials included in the response. Use query parameter accessMethod=<method> to override default access method.
      operationId: getSystemByName
      parameters:
        - name: sysName
          in: path
          required: true
          schema:
            type: string
        - name: returnCredentials
          in: query
          schema:
            type: boolean
            default: false
        - name: accessMethod
          in: query
          schema:
            type: string
            default: ''
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: System found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespSystem'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: System not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    delete:
      tags:
        - systems
      summary: Delete a system given the system name
      description: 'Delete a system given the system name. '
      operationId: deleteSystemByName
      parameters:
        - name: sysName
          in: path
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: System deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/systems/healthcheck':
    get:
      tags:
        - general
      description: Health check.
      operationId: healthCheck
      responses:
        '200':
          description: Message received.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
components:
  schemas:
    RespBasic:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        result:
          type: object
    Credential:
      type: object
      properties:
        password:
          type: string
        privateKey:
          type: string
        publicKey:
          type: string
        accessKey:
          type: string
        accessSecret:
          type: string
        certificate:
          type: string
    ReqCreateCredential:
      type: object
      properties:
        credential:
          $ref: '#/components/schemas/Credential'
    RespCredential:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        result:
          $ref: '#/components/schemas/Credential'
    RespNameArray:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        result:
          $ref: '#/components/schemas/ResultNameArray'
    ResultNameArray:
      type: object
      properties:
        names:
          type: array
          items:
            type: string
    ReqPerms:
      type: object
      properties:
        permissions:
          type: array
          items:
            type: string
    RespResourceUrl:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        result:
          $ref: '#/components/schemas/ResultResourceUrl'
    ResultResourceUrl:
      type: object
      properties:
        url:
          type: string
    Capability:
      type: object
      properties:
        category:
          type: string
          enum:
            - SCHEDULER
            - OS
            - HARDWARE
            - SOFTWARE
            - JOB
            - CONTAINER
            - MISC
            - CUSTOM
        name:
          type: string
        value:
          type: string
    JsonArray:
      type: object
      properties:
        asBoolean:
          type: boolean
        asInt:
          type: integer
          format: int32
        asString:
          type: string
        asByte:
          type: string
          format: byte
        asNumber:
          type: number
        asDouble:
          type: number
          format: double
        asFloat:
          type: number
          format: float
        asLong:
          type: integer
          format: int64
        asCharacter:
          type: string
        asBigDecimal:
          type: number
        asBigInteger:
          type: integer
        asShort:
          type: integer
          format: int32
        asJsonObject:
          $ref: '#/components/schemas/JsonObject'
        jsonArray:
          type: boolean
        jsonObject:
          type: boolean
        jsonPrimitive:
          type: boolean
        jsonNull:
          type: boolean
        asJsonPrimitive:
          $ref: '#/components/schemas/JsonPrimitive'
        asJsonNull:
          $ref: '#/components/schemas/JsonNull'
        asJsonArray:
          $ref: '#/components/schemas/JsonArray'
    JsonNull:
      type: object
      properties:
        asBoolean:
          type: boolean
        asInt:
          type: integer
          format: int32
        asString:
          type: string
        asJsonObject:
          $ref: '#/components/schemas/JsonObject'
        asByte:
          type: string
          format: byte
        jsonArray:
          type: boolean
        jsonObject:
          type: boolean
        jsonPrimitive:
          type: boolean
        jsonNull:
          type: boolean
        asJsonPrimitive:
          $ref: '#/components/schemas/JsonPrimitive'
        asJsonNull:
          $ref: '#/components/schemas/JsonNull'
        asNumber:
          type: number
        asDouble:
          type: number
          format: double
        asFloat:
          type: number
          format: float
        asLong:
          type: integer
          format: int64
        asCharacter:
          type: string
        asBigDecimal:
          type: number
        asBigInteger:
          type: integer
        asShort:
          type: integer
          format: int32
        asJsonArray:
          $ref: '#/components/schemas/JsonArray'
    JsonObject:
      type: object
      properties:
        asBoolean:
          type: boolean
        asInt:
          type: integer
          format: int32
        asString:
          type: string
        asJsonObject:
          $ref: '#/components/schemas/JsonObject'
        asByte:
          type: string
          format: byte
        jsonArray:
          type: boolean
        jsonObject:
          type: boolean
        jsonPrimitive:
          type: boolean
        jsonNull:
          type: boolean
        asJsonPrimitive:
          $ref: '#/components/schemas/JsonPrimitive'
        asJsonNull:
          $ref: '#/components/schemas/JsonNull'
        asNumber:
          type: number
        asDouble:
          type: number
          format: double
        asFloat:
          type: number
          format: float
        asLong:
          type: integer
          format: int64
        asCharacter:
          type: string
        asBigDecimal:
          type: number
        asBigInteger:
          type: integer
        asShort:
          type: integer
          format: int32
        asJsonArray:
          $ref: '#/components/schemas/JsonArray'
    JsonPrimitive:
      type: object
      properties:
        asBoolean:
          type: boolean
        asInt:
          type: integer
          format: int32
        asString:
          type: string
        number:
          type: boolean
        string:
          type: boolean
        boolean:
          type: boolean
        asByte:
          type: string
          format: byte
        asNumber:
          type: number
        asDouble:
          type: number
          format: double
        asFloat:
          type: number
          format: float
        asLong:
          type: integer
          format: int64
        asCharacter:
          type: string
        asBigDecimal:
          type: number
        asBigInteger:
          type: integer
        asShort:
          type: integer
          format: int32
        asJsonObject:
          $ref: '#/components/schemas/JsonObject'
        jsonArray:
          type: boolean
        jsonObject:
          type: boolean
        jsonPrimitive:
          type: boolean
        jsonNull:
          type: boolean
        asJsonPrimitive:
          $ref: '#/components/schemas/JsonPrimitive'
        asJsonNull:
          $ref: '#/components/schemas/JsonNull'
        asJsonArray:
          $ref: '#/components/schemas/JsonArray'
    ReqCreateSystem:
      type: object
      properties:
        tSystem:
          $ref: '#/components/schemas/TSystem'
    TSystem:
      type: object
      properties:
        id:
          type: integer
          format: int64
        created:
          type: string
        updated:
          type: string
        tenant:
          type: string
        name:
          type: string
        description:
          type: string
        systemType:
          type: string
          enum:
            - LINUX
            - OBJECT_STORE
        owner:
          type: string
        host:
          type: string
        enabled:
          type: boolean
        effectiveUserId:
          type: string
        defaultAccessMethod:
          type: string
          enum:
            - PASSWORD
            - PKI_KEYS
            - ACCESS_KEY
            - CERT
        accessCredential:
          $ref: '#/components/schemas/Credential'
        bucketName:
          type: string
        rootDir:
          type: string
        transferMethods:
          type: array
          items:
            type: string
            enum:
              - SFTP
              - S3
        port:
          type: integer
          format: int32
        useProxy:
          type: boolean
        proxyHost:
          type: string
        proxyPort:
          type: integer
          format: int32
        jobCanExec:
          type: boolean
        jobLocalWorkingDir:
          type: string
        jobLocalArchiveDir:
          type: string
        jobRemoteArchiveSystem:
          type: string
        jobRemoteArchiveDir:
          type: string
        jobCapabilities:
          type: array
          items:
            $ref: '#/components/schemas/Capability'
        tags:
          type: array
          items:
            type: string
        notes:
          $ref: '#/components/schemas/JsonObject'
    RespSystem:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        result:
          $ref: '#/components/schemas/TSystem'
    RespChangeCount:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        result:
          $ref: '#/components/schemas/ResultChangeCount'
    ResultChangeCount:
      type: object
      properties:
        changes:
          type: integer
          format: int32
  securitySchemes:
    TapisJWT:
      type: apiKey
      description: Tapis signed JWT token authentication
      name: X-Tapis-Token
      in: header
