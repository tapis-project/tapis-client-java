openapi: 3.0.1
info:
  title: Tapis Systems API
  description: The Tapis Systems API provides for management of Tapis Systems including access and transfer protocols and credentials.
  contact:
    name: CICSupport
    email: cicsupport@tacc.utexas.edu
  license:
    name: 3-Clause BSD License
    url: 'https://opensource.org/licenses/BSD-3-Clause'
  version: '0.1'
externalDocs:
  description: Tapis Home
  url: 'https://tacc-cloud.readthedocs.io/projects/agave'
servers:
  - url: /v3/systems
    description: Base URL
    variables: {}
security:
  - Tapis JWT: []
tags:
  - name: systems
    description: manage systems
paths:
  '/v3/systems/perms/{systemName}/user/{userName}':
    get:
      tags:
        - permissions
      summary: Retrieve system related permissions for given system and user
      description: Retrieve all system related permissions for a given system and user.
      operationId: getUserPerms
      parameters:
        - name: systemName
          in: path
          required: true
          schema:
            type: string
        - name: userName
          in: path
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespNameArray'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: System not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    post:
      tags:
        - permissions
      summary: Create permissions in the Security Kernel giving a user access to a system
      description: 'Create permissions in the Security Kernel for a user using a request body. Requester must be owner of the system. Permissions: READ, MODIFY, DELETE or ''*'' to indicate all permissions.'
      operationId: grantUserPerms
      parameters:
        - name: systemName
          in: path
          required: true
          schema:
            type: string
        - name: userName
          in: path
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        description: A JSON object specifying a list of permissions.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqPerms'
        required: true
      responses:
        '200':
          description: Permissions granted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '400':
          description: Input error. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/systems/perms/{systemName}/user/{userName}/{permission}':
    delete:
      tags:
        - permissions
      summary: Revoke specified permission in the Security Kernel
      description: 'Revoke permission in the Security Kernel for a user. Requester must be owner of the system. Permissions: READ, MODIFY or DELETE.'
      operationId: revokeUserPerm
      parameters:
        - name: systemName
          in: path
          required: true
          schema:
            type: string
        - name: userName
          in: path
          required: true
          schema:
            type: string
        - name: permission
          in: path
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Permission revoked.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '400':
          description: Input error. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/systems/perms/{systemName}/user/{userName}/revoke':
    post:
      tags:
        - permissions
      summary: Revoke system permissions in the Security Kernel using request body
      description: 'Revoke permissions in the Security Kernel for a user using a request body. Requester must be owner of the system. Permissions: READ, MODIFY, DELETE or ''*'' to indicate all permissions.'
      operationId: revokeUserPerms
      parameters:
        - name: systemName
          in: path
          required: true
          schema:
            type: string
        - name: userName
          in: path
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        description: A JSON object specifying a list of permissions.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqPerms'
        required: true
      responses:
        '200':
          description: Permission revoked.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  /v3/systems/system:
    get:
      tags:
        - systems
      summary: Retrieve list of system names
      description: Retrieve list of system names.
      operationId: getSystemNames
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespNameArray'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    post:
      tags:
        - systems
      summary: Create a system
      description: 'Create a system using a request body. System name must be unique within a tenant and can be composed of alphanumeric characters and the following special characters: [-._~]. Name must begin with an alphabetic character and can be no more than 256 characters in length. Description is optional with a maximum length of 2048 characters.'
      operationId: createSystem
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        description: A JSON object specifying information for the system to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqCreateSystem'
        required: true
      responses:
        '201':
          description: System created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '400':
          description: Input error. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '409':
          description: System already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/systems/system/{name}':
    get:
      tags:
        - systems
      summary: Retrieve information for a system
      description: Retrieve information for a system given the system name. Use query parameter returnCredentials = true to have the user access credentials included in the response.
      operationId: getSystemByName
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
        - name: returnCredentials
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: System found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespSystem'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: System not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    delete:
      tags:
        - systems
      summary: Delete a system given the system name
      description: 'Delete a system given the system name. '
      operationId: deleteSystemByName
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: System deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  /v3/systems/hello:
    get:
      tags:
        - general
      description: Connectivity test.
      operationId: getHello
      responses:
        '200':
          description: Message received.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespName'
        '401':
          description: Not authorized.
        '500':
          description: Server error.
  /v3/systems/healthcheck:
    get:
      tags:
        - general
      description: Health check.
      operationId: healthCheck
      responses:
        '200':
          description: Message received.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
components:
  schemas:
    RespBasic:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        result:
          type: object
    ReqPerms:
      type: object
      properties:
        permissions:
          type: array
          items:
            type: string
    RespNameArray:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        result:
          $ref: '#/components/schemas/ResultNameArray'
    ResultNameArray:
      type: object
      properties:
        names:
          type: array
          items:
            type: string
    RespResourceUrl:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        result:
          $ref: '#/components/schemas/ResultResourceUrl'
    ResultResourceUrl:
      type: object
      properties:
        url:
          type: string
    ReqCreateSystem:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        owner:
          type: string
        host:
          type: string
        available:
          type: boolean
        bucketName:
          type: string
        rootDir:
          type: string
        jobInputDir:
          type: string
        jobOutputDir:
          type: string
        scratchDir:
          type: string
        workDir:
          type: string
        effectiveUserId:
          type: string
        accessCredential:
          type: string
        tags:
          type: string
        notes:
          type: string
        accessMechanism:
          type: string
        transferMechanisms:
          type: array
          items:
            type: string
        port:
          type: integer
          format: int32
        useProxy:
          type: boolean
        proxyHost:
          type: string
        proxyPort:
          type: integer
          format: int32
    RespSystem:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        result:
          $ref: '#/components/schemas/TSystem'
    TSystem:
      type: object
      properties:
        id:
          type: integer
          format: int64
        tenant:
          type: string
        name:
          type: string
        description:
          type: string
        owner:
          type: string
        host:
          type: string
        available:
          type: boolean
        bucketName:
          type: string
        rootDir:
          type: string
        jobInputDir:
          type: string
        jobOutputDir:
          type: string
        workDir:
          type: string
        scratchDir:
          type: string
        accessCredential:
          type: string
        effectiveUserId:
          type: string
        tags:
          type: string
        notes:
          type: string
        accessMechanism:
          type: string
          enum:
            - NONE
            - ANONYMOUS
            - SSH_PASSWORD
            - SSH_KEYS
            - SSH_CERT
        transferMechanisms:
          type: array
          items:
            type: string
            enum:
              - SFTP
              - S3
              - LOCAL
        port:
          type: integer
          format: int32
        useProxy:
          type: boolean
        proxyHost:
          type: string
        proxyPort:
          type: integer
          format: int32
        created:
          type: string
        updated:
          type: string
    RespChangeCount:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        result:
          $ref: '#/components/schemas/ResultChangeCount'
    ResultChangeCount:
      type: object
      properties:
        changes:
          type: integer
          format: int32
    RespName:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        result:
          $ref: '#/components/schemas/ResultName'
    ResultName:
      type: object
      properties:
        name:
          type: string
  securitySchemes:
    TapisJWT:
      type: apiKey
      description: Tapis signed JWT token authentication
      name: X-Tapis-Token
      in: header
