openapi: 3.0.1
info:
  title: Tapis Security API
  description: The Tapis Security API provides access to the Tapis Security Kernel authorization and secrets facilities.
  contact:
    name: CICSupport
    email: cicsupport@tacc.utexas.edu
  license:
    name: 3-Clause BSD License
    url: 'https://opensource.org/licenses/BSD-3-Clause'
  version: '0.1'
externalDocs:
  description: Tapis Home
  url: 'https://tacc-cloud.readthedocs.io/projects/agave'
servers:
  - url: 'http://localhost:8080/v3'
    description: Local test environment
    variables: {}
security:
  - TapisJWT: []
tags:
  - name: role
    description: manage roles and permissions
  - name: user
    description: assign roles and permissions to users
  - name: general
    description: informational endpoints
paths:
  /security/role:
    get:
      tags:
        - role
      description: Get the names of all roles in the tenant in alphabetic order.
      operationId: getRoleNames
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: List of role names returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespNameArray'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    post:
      tags:
        - role
      description: 'Create a role using a request body.  Role names are case sensitive, alpha-numeric strings that can also contain underscores.  Role names must start with an alphbetic character and can be no more than 58 characters in length.  The desciption can be no more than 2048 characters long.  If the role already exists, this request has no effect.'
      operationId: createRole
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ReqCreateRole'
        required: true
      responses:
        '200':
          description: Role existed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '201':
          description: Role created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  /security/role/replacePathPrefix:
    post:
      tags:
        - role
      description: |-
        Replace the text in a permission specification when its last component defines an *extended path attribute*.  Extended path attributes enhance the standard Shiro matching algorithm with one that treats designated components in a permission specification as a path name, such as a posix file or directory path name.  This request is useful when files or directories have been renamed or moved and their authorizations need to be adjusted.  Consider, for example, permissions that conform to the following specification:

              files:tenantId:op:systemId:path

        By definition, the last component is an extended path attribute whose content can be changed by replacePathPrefix requests.  Specifically, paths that begin with the oldPrefix will have that prefix replaced with the newPrefix value.  Replacement only occurs on permissions that also match the schema and oldSystemId parameter values.  The systemId is required to be the next to last attribute and immediately preceding the path attribute.

        Additionally, the oldSystemId is replaced with the newSystemId when a match is found.  If a roleName is provided, then replacement is limited to permissions defined only in that role.  Otherwise, permissions in all roles that meet the other matching criteria will be considered.

        The optional parameters are roleName, oldPrefix and newPrefix. When roleName is specified then only permissions assigned to that role are processed. When oldPrefix is missing or the empty string, then it will match every permission in which the specified schema, tenant and oldSystemId appear. Every such match will prepend the newPrefix to the permission's path.

        When newPrefix is missing or the empty string, then the oldPrefix is will be effectively removed from path and no new characters added. When both oldPrefix and newPrefix are missing or empty, the transformation is limited to the system IDs.

        The previewPathPrefix request provides a way to do a dry run by using the same input as this request, calculating the permissions that would change and what their new values would be, but not actually changing those permissions.

        Use a request body to pass parameters on this request.  The response indicates the number of changed permission specifications.
      operationId: replacePathPrefix
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ReqReplacePathPrefix'
        required: true
      responses:
        '200':
          description: Path prefixes replaced.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Named role not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespName'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/security/role/{roleName}':
    get:
      tags:
        - role
      description: Get the named role's definition.
      operationId: getRoleByName
      parameters:
        - name: roleName
          in: path
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Named role returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespRole'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Named role not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespName'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    delete:
      tags:
        - role
      description: Delete the named role.
      operationId: deleteRoleByName
      parameters:
        - name: roleName
          in: path
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Role deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/security/role/updateName/{roleName}':
    post:
      tags:
        - role
      description: 'Update an existing role using a request body.  Role names are case sensitive, alphanumeric strings that can contain underscores but must begin with an alphabetic character.  The limit on role name is 58 characters.'
      operationId: updateRoleName
      parameters:
        - name: roleName
          in: path
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ReqUpdateRoleName'
        required: true
      responses:
        '200':
          description: Role name updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Named role not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespName'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/security/role/updateDesc/{roleName}':
    post:
      tags:
        - role
      description: Update an existing role using a request body.  The size limit on a description is 2048 characters.
      operationId: updateRoleDescription
      parameters:
        - name: roleName
          in: path
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ReqUpdateRoleDescription'
        required: true
      responses:
        '200':
          description: Role description updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Named role not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespName'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  /security/role/addPerm:
    post:
      tags:
        - role
      description: |-
        Add a permission to an existing role using a request body.  If the permission already exists, then the request has no effect and the change count returned is zero. Otherwise, the permission is added and the change count is one.  Permissions are case-sensitive strings that follow the format defined by Apache Shiro (https://shiro.apache.org/permissions.html).  This format defines any number of colon-separated (:) parts, with the possible use of asterisks (*) as wildcards and commas (,) as aggregators.  Here are two example permission strings:

            system:MyTenant:read,write:system1
            system:MyTenant:create,read,write,delete:*

        See the Shiro documentation for further details.  Note that the three reserved characters, [: * ,], cannot appear in the text of any part.  It's the application's responsibility to escape those characters in a manner that is safe in the application's domain.
      operationId: addRolePermission
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ReqAddRolePermission'
        required: true
      responses:
        '200':
          description: Permission assigned to role.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Named role not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespName'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  /security/role/removePerm:
    post:
      tags:
        - role
      description: Remove a permission from a role using a request body.
      operationId: removeRolePermission
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ReqRemoveRolePermission'
        required: true
      responses:
        '200':
          description: Permission removed from role.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Named role not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespName'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  /security/role/addChild:
    post:
      tags:
        - role
      description: 'Add a child role to another role using a request body.  If the child already exists, then the request has no effect and the change count returned is zero. Otherwise, the child is added and the change count is one.'
      operationId: addChildRole
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ReqAddChildRole'
        required: true
      responses:
        '200':
          description: Child assigned to parent role.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Named role not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespName'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  /security/role/removeChild:
    post:
      tags:
        - role
      description: Remove a child role from a parent role using a request body.
      operationId: removeChildRole
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ReqRemoveChildRole'
        required: true
      responses:
        '200':
          description: Child removed from parent role.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Named role not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespName'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  /security/role/previewPathPrefix:
    post:
      tags:
        - role
      description: |-
        This read-only endpoint previews the transformations that would take place if the same input was used on the replacePathPrefix POST call. It is implemented as a POST so that the replacePathPrefix input can be used, but this call changes nothing and has no side effects.

        One application of this call is to get an accounting of existing system/path combinations that match a certain specification. Such information would be useful when trying to duplicate a set of permissions. For example, one may want to copy a file subtree to another location and assign the same permissions to the new subtree as currently exist on the source subtree. One could use the information returned from this call to query the users that should be granted permission on the new subtree.

        The optional parameters are roleName, oldPrefix and newPrefix. When roleName is specified then only permissions assigned to that role are processed. When oldPrefix is missing or the empty string, then it will match every permission in which the specified schema, tenant and oldSystemId appear. Every such match will prepend the newPrefix to the permission's path.

        When newPrefix is missing or the empty string, then the oldPrefix is will be effectively removed from path and no new characters added. When both oldPrefix and newPrefix are missing or empty, the transformation is limited to the system IDs.

        The object returned contains an array of transformation objects, each of which contains the unique permission sequence number, the existing permission that matched the search criteria and the permission if the specified transformations were applied.
      operationId: previewPathPrefix
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ReqPreviewPathPrefix'
        required: true
      responses:
        '200':
          description: Path prefixes previewed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespPathPrefixes'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Named role not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespName'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  /security/ready:
    get:
      tags:
        - general
      description: Lightwieght readiness check.
      operationId: ready
      responses:
        '200':
          description: Service ready.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '503':
          description: Service unavailable.
  /security/hello:
    get:
      tags:
        - general
      description: Logged connectivity test.
      operationId: sayHello
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Message received.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
        '500':
          description: Server error.
  /security/healthcheck:
    get:
      tags:
        - general
      description: Lightwieght health check for liveness.
      operationId: checkHealth
      responses:
        '200':
          description: Message received.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '503':
          description: Service unavailable.
  /security/user/hasRole:
    post:
      tags:
        - user
      description: 'Check whether a user has been assigned the specified role, either directly or transitively.'
      operationId: hasRole
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ReqUserHasRole'
        required: true
      responses:
        '200':
          description: Check completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespAuthorized'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  /security/user/removeRole:
    post:
      tags:
        - user
      description: Remove a previously granted role from a user.
      operationId: removeRole
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ReqRemoveUserRole'
        required: true
      responses:
        '200':
          description: Role removed from user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  /security/user:
    get:
      tags:
        - user
      description: Get the names of all users in the tenant that have been granted a role or permission.
      operationId: getUserNames
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Sorted list of user names.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespNameArray'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/security/user/roles/{user}':
    get:
      tags:
        - user
      description: 'Get the roles assigned to a user, including those assigned transively.'
      operationId: getUserRoles
      parameters:
        - name: user
          in: path
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: List of roles names assigned to the user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespNameArray'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/security/user/perms/{user}':
    get:
      tags:
        - user
      description: 'Get the permissions assigned to a user, including those assigned transively.'
      operationId: getUserPerms
      parameters:
        - name: user
          in: path
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: List of permissions assigned to the user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespNameArray'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  /security/user/grantRole:
    post:
      tags:
        - user
      description: Grant a user the specified role.
      operationId: grantRole
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ReqGrantUserRole'
        required: true
      responses:
        '200':
          description: Role assigned to user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Named role not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespName'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  /security/user/grantRoleWithPerm:
    post:
      tags:
        - user
      description: Grant a user the specified role containing the specified permission.  This compound request first adds the permission to the role if it is not already a member of the role and then assigns the role to the user.  The change count returned can range from zero to two depending on how many insertions were actually required.
      operationId: grantRoleWithPermission
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ReqGrantUserRoleWithPermission'
        required: true
      responses:
        '200':
          description: Permission assigned to user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Role not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespName'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  /security/user/grantUserPermission:
    post:
      tags:
        - user
      description: |-
        Grant a user the specified permission by assigning that permission to to the user's default role.  If the user's default role does not exist,this request will create that role and grant it to the user before assigning the permission to the role.

        A user's default role is constructed by prepending '^^' to the user's name. This implies the maximum length of a user name is 58 since role names are limited to 60 characters.

        The change count returned can range from zero to three depending on how many insertions and updates were actually required.
      operationId: grantUserPermission
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ReqGrantUserPermission'
        required: true
      responses:
        '200':
          description: Permission assigned to user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  /security/user/hasRoleAny:
    post:
      tags:
        - user
      description: Check whether a user has been assigned any of the roles specified in the request body.
      operationId: hasRoleAny
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ReqUserHasRoleMulti'
        required: true
      responses:
        '200':
          description: Check completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespAuthorized'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  /security/user/hasRoleAll:
    post:
      tags:
        - user
      description: Check whether a user has been assigned all of the roles specified in the request body.
      operationId: hasRoleAll
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ReqUserHasRoleMulti'
        required: true
      responses:
        '200':
          description: Check completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespAuthorized'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  /security/user/isPermitted:
    post:
      tags:
        - user
      description: 'Check whether specified permission matches a permission assigned to the user, either directly or transitively.'
      operationId: isPermitted
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ReqUserIsPermitted'
        required: true
      responses:
        '200':
          description: Check completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespAuthorized'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  /security/user/isPermittedAny:
    post:
      tags:
        - user
      description: Check whether a user's permissions satisfy any of the permission specifications contained in the request body.
      operationId: isPermittedAny
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ReqUserIsPermittedMulti'
        required: true
      responses:
        '200':
          description: Check completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespAuthorized'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  /security/user/isPermittedAll:
    post:
      tags:
        - user
      description: Check whether a user's permissions satisfy all of the permission specifications contained in the request body.
      operationId: isPermittedAll
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ReqUserIsPermittedMulti'
        required: true
      responses:
        '200':
          description: Check completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespAuthorized'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/security/user/withRole/{roleName}':
    get:
      tags:
        - user
      description: Get all users assigned a role.  The role must exist in the tenant.
      operationId: getUsersWithRole
      parameters:
        - name: roleName
          in: path
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Sorted list of users assigned a role.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespNameArray'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Named role not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespName'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/security/user/withPermission/{permSpec}':
    get:
      tags:
        - user
      description: |-
        Get all users assigned a permission.  The permSpec parameter is a permission specification that uses colons as separators, the asterisk as a wildcard character and commas to define lists.  Here are examples of permission specifications:

            system:mytenant:read:mysystem
            system:mytenant:*:mysystem
            system:mytenant
            files:mytenant:read,write:mysystems
        This method recognizes the percent sign (%) as a string wildcard only in the context of database searching.  If a percent sign (%) appears in the permSpec it is interpreted as a zero or more character wildcard.  For example, the following specification would match the first three of the above example specifications but not the fourth:

            system:mytenant:%

        The wildcard character cannot appear as the first character in the permSpec.
      operationId: getUsersWithPermission
      parameters:
        - name: permSpec
          in: path
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Sorted list of users assigned a permission.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespNameArray'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
components:
  schemas:
    RespResourceUrl:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        result:
          $ref: '#/components/schemas/ResultResourceUrl'
    ResultResourceUrl:
      type: object
      properties:
        url:
          type: string
    RespBasic:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        result:
          type: object
    ReqCreateRole:
      type: object
      properties:
        roleName:
          type: string
        description:
          type: string
    RespChangeCount:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        result:
          $ref: '#/components/schemas/ResultChangeCount'
    ResultChangeCount:
      type: object
      properties:
        changes:
          type: integer
          format: int32
    RespName:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        result:
          $ref: '#/components/schemas/ResultName'
    ResultName:
      type: object
      properties:
        name:
          type: string
    ReqReplacePathPrefix:
      type: object
      properties:
        schema:
          type: string
        roleName:
          type: string
        oldSystemId:
          type: string
        newSystemId:
          type: string
        oldPrefix:
          type: string
        newPrefix:
          type: string
    RespNameArray:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        result:
          $ref: '#/components/schemas/ResultNameArray'
    ResultNameArray:
      type: object
      properties:
        names:
          type: array
          items:
            type: string
    RespRole:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        result:
          $ref: '#/components/schemas/SkRole'
    SkRole:
      type: object
      properties:
        id:
          type: integer
          format: int32
        tenant:
          type: string
        name:
          type: string
        description:
          type: string
        created:
          type: string
        createdby:
          type: string
        updated:
          type: string
        updatedby:
          type: string
    ReqUpdateRoleName:
      type: object
      properties:
        newRoleName:
          type: string
    ReqUpdateRoleDescription:
      type: object
      properties:
        description:
          type: string
    ReqAddRolePermission:
      type: object
      properties:
        roleName:
          type: string
        permSpec:
          type: string
    ReqRemoveRolePermission:
      type: object
      properties:
        roleName:
          type: string
        permSpec:
          type: string
    ReqAddChildRole:
      type: object
      properties:
        parentRoleName:
          type: string
        childRoleName:
          type: string
    ReqRemoveChildRole:
      type: object
      properties:
        parentRoleName:
          type: string
        childRoleName:
          type: string
    RespPathPrefixes:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        result:
          type: array
          items:
            $ref: '#/components/schemas/Transformation'
    Transformation:
      type: object
      properties:
        permId:
          type: integer
          format: int32
        oldPerm:
          type: string
        newPerm:
          type: string
    ReqPreviewPathPrefix:
      type: object
      properties:
        schema:
          type: string
        roleName:
          type: string
        oldSystemId:
          type: string
        newSystemId:
          type: string
        oldPrefix:
          type: string
        newPrefix:
          type: string
    RespAuthorized:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        result:
          $ref: '#/components/schemas/ResultAuthorized'
    ResultAuthorized:
      type: object
      properties:
        isAuthorized:
          type: boolean
    ReqUserHasRole:
      type: object
      properties:
        user:
          type: string
        roleName:
          type: string
    ReqRemoveUserRole:
      type: object
      properties:
        user:
          type: string
        roleName:
          type: string
    ReqGrantUserRole:
      type: object
      properties:
        user:
          type: string
        roleName:
          type: string
    ReqGrantUserRoleWithPermission:
      type: object
      properties:
        user:
          type: string
        roleName:
          type: string
        permSpec:
          type: string
    ReqGrantUserPermission:
      type: object
      properties:
        user:
          type: string
        permSpec:
          type: string
    ReqUserHasRoleMulti:
      type: object
      properties:
        user:
          type: string
        roleNames:
          type: array
          items:
            type: string
    ReqUserIsPermitted:
      type: object
      properties:
        user:
          type: string
        permSpec:
          type: string
    ReqUserIsPermittedMulti:
      type: object
      properties:
        user:
          type: string
        permSpecs:
          type: array
          items:
            type: string
  securitySchemes:
    TapisJWT:
      type: apiKey
      description: Tapis signed JWT token authentication
      name: X-Tapis-Token
      in: header
