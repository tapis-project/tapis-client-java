openapi: 3.0.3
info:
  title: Tapis Applications API
  description: The Tapis Applications API provides for management of Tapis Applications including permissions.
  version: '0.0.1'
  termsOfService: "https://tapis-project.org"
  contact:
    name: "Applications API - CICSupport"
    url: "https://tapis-project.org"
    email: "cicsupport@tacc.utexas.edu"
  license:
    name: 3-Clause BSD License
    url: 'https://opensource.org/licenses/BSD-3-Clause'
externalDocs:
  description: Tapis Project
  url: 'https://tapis-project.org'
servers:
  - url: 'http://localhost:8080/'
    description: Local test environment
    variables: {}
  - url: 'https://dev.develop.tapis.io/'
    description: Development environment
    variables: {}
security:
  - TapisJWT: []
tags:
  - name: Applications
    description: manage Applications

# ------------------------------------------------------------------------------
# --- Paths -------------------------------------------------------------------
paths:

  # --- Paths for /apps -----------------------------------------------------
  '/v3/apps/healthcheck':
    get:
      tags:
        - General
      description: Health check.
      operationId: healthCheck
      responses:
        '200':
          description: Message received.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
  '/v3/apps/readycheck':
    get:
      tags:
        - General
      description: Ready check.
      operationId: readyCheck
      responses:
        '200':
          description: Service ready.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '503':
          description: Service unavailable.

  '/v3/apps':
    get:
      tags:
        - Applications
      summary: Retrieve Applications
      description: Retrieve details for Applications. Use search and select query parameters to limit results.
      operationId: getApps
      parameters:
        - name: pretty
          in: query
          description: Pretty print the response
          schema:
            type: boolean
        - name: search
          in: query
          description: Search conditions as a single query paramter. For example search=(name.like.MyApp*)~(enabled.eq.true)
          schema:
            type: string
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespAppArray'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    post:
      tags:
        - Applications
      summary: Create an app
      description: Create an app using a request body. App name must be unique within a tenant and can be composed of alphanumeric characters and the following special characters [-._~]. Name must begin with an alphabetic character and can be no more than 256 characters in length. Description is optional with a maximum length of 2048 characters.'
      operationId: createApp
      parameters:
        - name: pretty
          in: query
          description: Pretty print the response
          schema:
            type: boolean
      requestBody:
        required: true
        description: A JSON object specifying information for the app to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqCreateApp'
      responses:
        '201':
          description: App created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '400':
          description: Input error. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '409':
          description: App already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/apps/search/apps':
    get:
      tags:
        - Applications
      summary: Retrieve Applications matching search conditions specified as query parameters
      description: Retrieve details for Applications. Use query parameters to specify search conditions. For example ?owner.eq=jdoe&port.gt=1024
      operationId: searchAppsQueryParameters
      parameters:
        - name: pretty
          in: query
          description: Pretty print the response
          schema:
            type: boolean
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespAppArray'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    post:
      tags:
        - Applications
      summary: Retrieve Applications matching search conditions
      description: Retrieve details for Applications. Use request body to specify SQL-like search conditions.
      operationId: searchAppsRequestBody
      parameters:
        - name: pretty
          in: query
          description: Pretty print the response
          schema:
            type: boolean
      requestBody:
        required: true
        description: A JSON object specifying SQL-like search conditions as an array of strings. Strings are concatenated to form full search query.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqSearchApps'
      #          text/plain:
      #            schema:
      #              $ref: '#/components/schemas/ReqSearchAppsText'
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespAppArray'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/apps/{appName}':
    get:
      tags:
        - Applications
      summary: Retrieve app details
      description: Retrieve information for an app given the app name.
      operationId: getApp
      parameters:
        - name: appName
          in: path
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          description: Pretty print the response
          schema:
            type: boolean
        - name: requiredPerms
          in: query
          description: Comma separated list of required permissions. Can be used to perform an additional permissions check with one call. For example requiredPerms=EXECUTE. Deault is READ.
          schema:
            type: string
            default: 'READ'
      responses:
        '200':
          description: App found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespApp'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: App not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    delete:
      tags:
        - Applications
      summary: Soft delete an app
      description: Soft delete an app given the app name.
      operationId: deleteApp
      parameters:
        - name: appName
          in: path
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          description: Pretty print the response
          schema:
            type: boolean
      responses:
        '200':
          description: App deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    patch:
      tags:
        - Applications
      summary: Update an app
      description: Update attributes for an app. Attributes that may be updated are description, enabled, jobCapabilities, tags, notes.
      operationId: updateApp
      parameters:
        - name: appName
          in: path
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          description: Pretty print the response
          schema:
            type: boolean
      requestBody:
        required: true
        description: A JSON object specifying changes to be applied.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqUpdateApp'
      responses:
        '200':
          description: App updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '400':
          description: Input error. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: App not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/apps/{appName}/changeOwner/{userName}':
    post:
      tags:
        - Applications
      summary: Change app owner
      description: Change owner of an app.
      operationId: changeAppOwner
      parameters:
        - name: appName
          in: path
          required: true
          schema:
            type: string
        - name: userName
          in: path
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          description: Pretty print the response
          schema:
            type: boolean
      responses:
        '200':
          description: App owner updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: App not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'

  # --- Paths for /perms -------------------------------------------------------
  '/v3/apps/perms/{appName}/user/{userName}':
    get:
      tags:
        - Permissions
      summary: Retrieve app user permissions
      description: Retrieve all app related permissions for a given app and user.
      operationId: getUserPerms
      parameters:
        - name: appName
          in: path
          required: true
          schema:
            type: string
        - name: userName
          in: path
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          description: Pretty print the response
          schema:
            type: boolean
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespNameArray'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: App not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    post:
      tags:
        - Permissions
      summary: Create app user permissions
      description: Create permissions in the Security Kernel for a user. Requester must be owner of the app. Permissions are READ, MODIFY or ALL.
      operationId: grantUserPerms
      parameters:
        - name: appName
          in: path
          required: true
          schema:
            type: string
        - name: userName
          in: path
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          description: Pretty print the response
          schema:
            type: boolean
      requestBody:
        required: true
        description: A JSON object specifying a list of permissions.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqPerms'
      responses:
        '200':
          description: Permissions granted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '400':
          description: Input error. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'

  '/v3/apps/perms/{appName}/user/{userName}/revoke':
    post:
      tags:
        - Permissions
      summary: Revoke app user permissions
      description: Revoke permissions in the Security Kernel for a user. Requester must be owner of the app. Permissions are READ, MODIFY or ALL.
      operationId: revokeUserPerms
      parameters:
        - name: appName
          in: path
          required: true
          schema:
            type: string
        - name: userName
          in: path
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          description: Pretty print the response
          schema:
            type: boolean
      requestBody:
        required: true
        description: A JSON object specifying a list of permissions.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqPerms'
      responses:
        '200':
          description: Permission revoked.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'

  '/v3/apps/perms/{appName}/user/{userName}/{permission}':
    delete:
      tags:
        - Permissions
      summary: Revoke app user permission
      description: Revoke app user permission in the Security Kernel. Requester must be owner of the app. Permissions are READ, MODIFY or ALL.
      operationId: revokeUserPerm
      parameters:
        - name: appName
          in: path
          required: true
          schema:
            type: string
        - name: userName
          in: path
          required: true
          schema:
            type: string
        - name: permission
          in: path
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          description: Pretty print the response
          schema:
            type: boolean
      responses:
        '200':
          description: Permission revoked.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '400':
          description: Input error. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'

# ------------------------------------------------------------------------------
# --- Components ---------------------------------------------------------------
components:
  securitySchemes:
    TapisJWT:
      type: apiKey
      description: Tapis signed JWT token authentication
      name: X-Tapis-Token
      in: header
  schemas:
    # --- Model objects ------------------------------------------------------------
    App:
      type: object
      properties:
        id:
          type: integer
          format: int32
        tenant:
          type: string
        name:
          type: string
        description:
          type: string
        appType:
          type: string
          enum:
            - BATCH
            - INTERACTIVE
        owner:
          type: string
        enabled:
          type: boolean
        jobCapabilities:
          type: array
          items:
            $ref: '#/components/schemas/Capability'
        tags:
          type: array
          items:
            type: string
        notes:
          type: object
        importRefId:
          type: string
        deleted:
          type: boolean
        created:
          type: string
        updated:
          type: string
    Capability:
      type: object
      properties:
        category:
          type: string
          enum:
            - SCHEDULER
            - OS
            - HARDWARE
            - SOFTWARE
            - JOB
            - CONTAINER
            - MISC
            - CUSTOM
        name:
          type: string
        value:
          type: string

    # --- Request objects -----------------------------------------------------
    ReqCreateApp:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        appType:
          type: string
          enum:
            - BATCH
            - INTERACTIVE
        owner:
          type: string
        enabled:
          type: boolean
        jobCapabilities:
          type: array
          items:
            $ref: '#/components/schemas/Capability'
        tags:
          type: array
          items:
            type: string
        notes:
          type: object
    ReqUpdateApp:
      type: object
      properties:
        description:
          type: string
        enabled:
          type: boolean
        jobCapabilities:
          type: array
          items:
            $ref: '#/components/schemas/Capability'
        tags:
          type: array
          items:
            type: string
        notes:
          type: object
    ReqPerms:
      type: object
      properties:
        permissions:
          type: array
          items:
            type: string
    ReqSearchApps:
      type: object
      properties:
        search:
          type: array
          items:
            type: string

    # --- Response objects ----------------------------------------------------
    RespBasic:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        result:
          type: object
    RespNameArray:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        result:
          $ref: '#/components/schemas/ResultNameArray'
    ResultNameArray:
      type: object
      properties:
        names:
          type: array
          items:
            type: string
    RespChangeCount:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        result:
          $ref: '#/components/schemas/ResultChangeCount'
    ResultChangeCount:
      type: object
      properties:
        changes:
          type: integer
          format: int32
    RespResourceUrl:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        result:
          $ref: '#/components/schemas/ResultResourceUrl'
    ResultResourceUrl:
      type: object
      properties:
        url:
          type: string

    RespApp:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        result:
          $ref: '#/components/schemas/App'
    RespAppArray:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        result:
          type: array
          items:
            $ref: '#/components/schemas/App'
