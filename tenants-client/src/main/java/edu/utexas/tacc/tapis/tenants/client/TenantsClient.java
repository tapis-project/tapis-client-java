package edu.utexas.tacc.tapis.tenants.client;

import edu.utexas.tacc.tapis.tenants.client.gen.ApiClient;
import edu.utexas.tacc.tapis.tenants.client.gen.ApiException;
import edu.utexas.tacc.tapis.tenants.client.gen.Configuration;
import edu.utexas.tacc.tapis.tenants.client.gen.api.TenantsApi;
import edu.utexas.tacc.tapis.tenants.client.gen.model.*;
import org.apache.commons.lang3.StringUtils;

import java.util.Map;

/**
 * Class providing a convenient front-end for the automatically generated client code
 * for the Tenants Service REST API.
 * Underlying client classes with "gen" in the package name are generated by
 * openapi-generator each time a build is run.
 */
public class TenantsClient
{
  // ************************************************************************
  // *********************** Constants **************************************
  // ************************************************************************

  // ************************************************************************
  // *********************** Fields *****************************************
  // ************************************************************************

  // ************************************************************************
  // *********************** Constructors ***********************************
  // ************************************************************************

  public TenantsClient() { }

  /**
   * Constructor that overrides the compiled-in basePath value in ApiClient.  This
   * constructor is typically used in production.
   * <p>
   * The path includes the URL prefix up to and including the service root.  By
   * default this value is http://localhost:8080.  In production environments
   * the protocol is https and the host/port will be specific to that environment.
   *
   * @param path the base path
   */
  public TenantsClient(String path)
  {
    ApiClient apiClient = Configuration.getDefaultApiClient();
    if (!StringUtils.isBlank(path)) apiClient.setBasePath(path);
  }

  // ************************************************************************
  // *********************** Public Methods *********************************
  // ************************************************************************

  /**
   * getApiClient: Return underlying ApiClient
   */
  public ApiClient getApiClient() { return Configuration.getDefaultApiClient(); }

  /**
   * addDefaultHeader: Add http header to client
   */
  public ApiClient addDefaultHeader(String key, String val)
  {
    return Configuration.getDefaultApiClient().addDefaultHeader(key, val);
  }

    /**
     * Get Security Kernel base path from tenant
     */
    public String getSKBasePath(String tenant) throws Exception
    {
      String retUrl = null;
      var tenantsApi = new TenantsApi();
      // Build the request
      Map resp = null;
      // TODO exception handling
      try { resp = (Map) tenantsApi.getTenant(tenant); }
      catch (ApiException e) {System.out.println("" + e); throw e;}
      // Generated code returns response as a map of maps
      if (resp != null)
      {
        Map resp2 = (Map) resp.get("result");
        if (resp2 != null) { retUrl = (String) resp2.get("security_kernel"); }
      }
      return retUrl;
    }

  /**
   * Get all Tenant info given tenant name
   */
  public Tenant getTenant(String tenantName) throws Exception
  {
    String tenantId = null;
    String skUrl = null;
    String tokUrl = null;
    String authUrl = null;
    String pubKey = null;
    Tenant tenant = new Tenant();
    var tenantsApi = new TenantsApi();
    Map resp = null;
    // TODO exception handling
    try { resp = (Map) tenantsApi.getTenant(tenantName); }
    catch (ApiException e) {System.out.println("" + e); throw e;}
    // Generated code returns response as a map of maps
    if (resp != null)
    {
      Map resp2 = (Map) resp.get("result");
      if (resp2 != null)
      {
        tenantId = (String) resp2.get("tenant_id");
        pubKey = (String) resp2.get("public_key");
        authUrl = (String) resp2.get("authenticator");
        tokUrl = (String) resp2.get("token_service");
        skUrl = (String) resp2.get("security_kernel");
      }
    }
    tenant.setPublicKey(pubKey);
    tenant.setTokenService(tokUrl);
    tenant.setSecurityKernel(skUrl);
    tenant.setAuthenticator(authUrl);
    tenant.setTenantId(tenantId);
    return tenant;
  }
}
