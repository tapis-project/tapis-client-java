package edu.utexas.tacc.tapis.globusproxy.client;

import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import org.apache.commons.lang3.StringUtils;

import edu.utexas.tacc.tapis.client.shared.Utils;
import edu.utexas.tacc.tapis.client.shared.exceptions.TapisClientException;
import edu.utexas.tacc.tapis.client.shared.ClientTapisGsonUtils;
import edu.utexas.tacc.tapis.client.shared.ITapisClient;

import edu.utexas.tacc.tapis.globusproxy.client.gen.model.InlineObject;
import edu.utexas.tacc.tapis.globusproxy.client.gen.model.ResultGlobusAuthUrl;
import edu.utexas.tacc.tapis.globusproxy.client.gen.ApiClient;
import edu.utexas.tacc.tapis.globusproxy.client.gen.ApiException;
import edu.utexas.tacc.tapis.globusproxy.client.gen.api.GeneralApi;
import edu.utexas.tacc.tapis.globusproxy.client.gen.api.AuthApi;
import edu.utexas.tacc.tapis.globusproxy.client.gen.api.FileOperationsApi;
import edu.utexas.tacc.tapis.globusproxy.client.gen.api.TransfersApi;
import edu.utexas.tacc.tapis.globusproxy.client.gen.model.AuthTokens;
import edu.utexas.tacc.tapis.globusproxy.client.gen.model.FileInfo;
import edu.utexas.tacc.tapis.globusproxy.client.gen.model.ReqCreateTransfer;
import edu.utexas.tacc.tapis.globusproxy.client.gen.model.ReqMakeDir;
import edu.utexas.tacc.tapis.globusproxy.client.gen.model.ReqRename;
import edu.utexas.tacc.tapis.globusproxy.client.gen.model.ResultCancelTask;
import edu.utexas.tacc.tapis.globusproxy.client.gen.model.TransferTask;
import edu.utexas.tacc.tapis.globusproxy.client.gen.model.InlineObject1;
import edu.utexas.tacc.tapis.globusproxy.client.gen.model.InlineObject2;
import edu.utexas.tacc.tapis.globusproxy.client.gen.model.InlineResponse2004Result;

/**
 * Class providing a convenient front-end to the automatically generated client code
 *   for the GlobusProxy Service REST API.
 * Underlying client classes with "gen" in the package name are generated by openapi-generator each time a build is run.
 */
public class GlobusProxyClient implements ITapisClient
{
  // ************************************************************************
  // *********************** Constants **************************************
  // ************************************************************************

  // Header key for JWT
  public static final String TAPIS_JWT_HEADER = "X-Tapis-Token";

  // Defaults
//  public static final boolean DEFAULT_STRICT_FILE_INPUTS = false;
//  public static final int DEFAULT_MAX_JOBS = Integer.MAX_VALUE;

  // ************************************************************************
  // *********************** Fields *****************************************
  // ************************************************************************
  // Instance of the underlying autogenerated client.
  private final ApiClient apiClient;

  private final AuthApi authApi;
  private final FileOperationsApi operationsApi;
  private final TransfersApi transfersApi;
  private final GeneralApi generalApi;

  // ************************************************************************
  // *********************** Constructors ***********************************
  // ************************************************************************

  /**
   * Default constructor which uses the compiled-in basePath based on the openapi spec
   *   used to autogenerate the client.
   */
  public GlobusProxyClient()
  {
    apiClient = new ApiClient();
    authApi = new AuthApi(apiClient);
    operationsApi = new FileOperationsApi(apiClient);
    transfersApi = new TransfersApi(apiClient);
    generalApi = new GeneralApi(apiClient);
  }

  /**
   * Constructor that overrides the compiled-in basePath value in ApiClient.
   * The path should include the URL prefix up to and including the service root.
   * In production environments the protocol should be https and the host/port will
   * be specific to that environment.
   *
   * @param path the base path URL prefix up to and including the service root
   * @param jwt the token to set in an HTTP header
   */
  public GlobusProxyClient(String path, String jwt)
  {
    apiClient = new ApiClient();
    if (!StringUtils.isBlank(path)) apiClient.setBasePath(path);
    if (!StringUtils.isBlank(jwt)) apiClient.addDefaultHeader(TAPIS_JWT_HEADER, jwt);
    authApi = new AuthApi(apiClient);
    operationsApi = new FileOperationsApi(apiClient);
    transfersApi = new TransfersApi(apiClient);
    generalApi = new GeneralApi(apiClient);
  }

  // ************************************************************************
  // *********************** Public Methods *********************************
  // ************************************************************************

  // getApiClient: Return underlying ApiClient
  public ApiClient getApiClient() { return apiClient; }

  // Update base path for default client.
  public String getBasePath() { return apiClient.getBasePath(); }

  // Update base path for default client.
  public GlobusProxyClient setBasePath(String basePath) { apiClient.setBasePath(basePath); return this; }

  // Add http header to default client
  public GlobusProxyClient addDefaultHeader(String key, String val) {apiClient.addDefaultHeader(key,val);return this;}

  /**
   *  Close connections and stop threads that can sometimes prevent JVM shutdown.
   */
  public void close()
  {
    try {
      // Best effort attempt to shut things down.
      var okClient = apiClient.getHttpClient();
      if (okClient != null)
      {
        var pool = okClient.connectionPool();
        if (pool != null) pool.evictAll();
      }
    } catch (Exception e) {}
  }

  // -----------------------------------------------------------------------
  // ------------------------- General -------------------------------
  // -----------------------------------------------------------------------

  /**
   * Check service health status
   *
   * @return Service health status as a string
   * @throws TapisClientException - If api call throws an exception
   */
  public String checkHealth() throws TapisClientException
  {
    String retVal = null;
    // Submit the request
    try
    {
      var resp = generalApi.healthCheck();
      // If response came back null return null
      if (resp == null) return null;
      retVal = (String) resp.getResult();
    }
    catch (ApiException e) { Utils.throwTapisClientException(e.getCode(), e.getResponseBody(), e); }
    catch (Exception e) { Utils.throwTapisClientException(-1, null, e); }
    return retVal;
  }

  // -----------------------------------------------------------------------
  // ------------------------- Auth -------------------------------
  // -----------------------------------------------------------------------
  /**
   * Return auth URL that can be used to obtain a Globus Native App Authorization Code
   *
   * @param clientId Id of the Globus client
   * @return The authorization URL
   * @throws TapisClientException - If api call throws an exception
   */
  public ResultGlobusAuthUrl getAuthUrl(String clientId) throws TapisClientException
  {
    if (StringUtils.isBlank(clientId)) return null;

    ResultGlobusAuthUrl authUrl = new ResultGlobusAuthUrl();
    // Submit the request
    try
    {
      var resp = authApi.getAuthUrl(clientId);
      // If response came back null return null
      if (resp == null || resp.getResult() == null) return null;
      // Marshal only the result from the response.
      var result = resp.getResult();
      if (result == null) return null;
      authUrl.setUrl(result.getUrl());
      authUrl.setSessionId(result.getSessionId());
    }
    catch (ApiException e) { Utils.throwTapisClientException(e.getCode(), e.getResponseBody(), e); }
    catch (Exception e) { Utils.throwTapisClientException(-1, null, e); }

    return authUrl;
  }

  /**
   * Exchange auth code for access and refresh token pair
   *
   * @param authCode - Globus Native App Authorization Code
   * @return tokens
   * @throws TapisClientException - If api call throws an exception
   */
  public AuthTokens getTokens(String sessionId, String authCode) throws TapisClientException
  {
    if (StringUtils.isBlank(authCode)) return null;

    AuthTokens authTokens = new AuthTokens();
    // Submit the request
    try
    {
      var resp = authApi.getTokens(sessionId, authCode);
      // If response came back null return null
      if (resp == null || resp.getResult() == null) return null;
      var result = resp.getResult();
      authTokens.setAccessToken(result.getAccessToken());
      authTokens.setRefreshToken(result.getRefreshToken());
    }
    catch (ApiException e) { Utils.throwTapisClientException(e.getCode(), e.getResponseBody(), e); }
    catch (Exception e) { Utils.throwTapisClientException(-1, null, e); }

    return authTokens;
  }

  /**
   * Check token pair and refresh as needed.
   *
   * @param clientId Id of the client
   * @param endpointId - Id of endpoint
   * @param accessToken - globus access token
   * @param refreshToken - globus refresh token
   * @return tokens
   * @throws TapisClientException - If api call throws an exception
   */
  public AuthTokens checkTokens(String clientId, String endpointId, String accessToken, String refreshToken)
          throws TapisClientException
  {
    if (StringUtils.isBlank(endpointId) || StringUtils.isBlank(accessToken) || StringUtils.isBlank(refreshToken))
      return null;

    AuthTokens authTokens = new AuthTokens();
    try
    {
      var resp = authApi.checkTokens(clientId, endpointId, accessToken, refreshToken);
      if (resp == null || resp.getResult() == null) return null;
      var result = resp.getResult();
      authTokens.setAccessToken(result.getAccessToken());
      authTokens.setRefreshToken(result.getRefreshToken());
    }
    catch (ApiException e) { Utils.throwTapisClientException(e.getCode(), e.getResponseBody(), e); }
    catch (Exception e) { Utils.throwTapisClientException(-1, null, e); }

    return authTokens;
  }

  // -----------------------------------------------------------------------
  // ------------------------- File Operations -----------------------------
  // -----------------------------------------------------------------------
  /**
   * Get list of files for an endpoint
   *
   * @param clientId Id of client
   * @param endpointId - Id of endpoint
   * @param accessToken - globus access token
   * @return list of files
   * @throws TapisClientException - If api call throws an exception
   */
  public List<FileInfo> listFiles(String clientId, String endpointId, String accessToken, String path, boolean recurse)
          throws TapisClientException
  {
    if (StringUtils.isBlank(endpointId) || StringUtils.isBlank(accessToken)) return null;

    ArrayList<FileInfo> fileInfoList =  new ArrayList<>();
    try
    {
      var resp = operationsApi.listFiles(clientId, endpointId, path, accessToken, recurse);
      if (resp == null) return null;
      var resultList = resp.getResult();
      if (resultList == null) return null;
      for (int i = 0; i < resultList.size(); i++)
      {
        var fiRaw = resultList.get(i);
        FileInfo fi = new FileInfo();
        fi.setType(fiRaw.getType());
        fi.setUser(fiRaw.getUser());
        fi.setGroup(fiRaw.getGroup());
        fi.setName(fiRaw.getName());
        fi.setPath(fiRaw.getPath());
        fi.setSize(fiRaw.getSize());
        fi.setLastModified(fiRaw.getLastModified());
        fi.setPermissions(fiRaw.getPermissions());
        fileInfoList.add(fi);
      }
    }
    catch (ApiException e) { Utils.throwTapisClientException(e.getCode(), e.getResponseBody(), e); }
    catch (Exception e) { Utils.throwTapisClientException(-1, null, e); }

    return fileInfoList;
  }

  /**
   * Delete a path
   *
   * @param clientId Id of client
   * @param endpointId - Id of endpoint
   * @param accessToken - globus access token
   * @return status
   * @throws TapisClientException - If api call throws an exception
   */
  public String deletePath(String clientId, String endpointId, String accessToken, String path, boolean recurse)
          throws TapisClientException
  {
    if (StringUtils.isBlank(endpointId) || StringUtils.isBlank(accessToken)) return null;

    String retVal = null;
    try
    {
      var resp = operationsApi.deletePath(clientId, endpointId, path, accessToken, recurse);
      if (resp == null) return null;
      retVal = resp.getStatus();
    }
    catch (ApiException e) { Utils.throwTapisClientException(e.getCode(), e.getResponseBody(), e); }
    catch (Exception e) { Utils.throwTapisClientException(-1, null, e); }

    return retVal;
  }

  /**
   * Create a directory
   *
   * @param clientId Id of client
   * @param endpointId - Id of endpoint
   * @param accessToken - globus access token
   * @return status
   * @throws TapisClientException - If api call throws an exception
   */
  public String makeDir(String clientId, String endpointId, String accessToken, ReqMakeDir reqMakeDir)
          throws TapisClientException
  {
    if (StringUtils.isBlank(endpointId) || StringUtils.isBlank(accessToken) || reqMakeDir == null) return null;

    String retVal = null;
    // NOTE: IF openapi spec changes this class name may change. Not clear how to make code more robust and
    //       not depend on the generated class names.
    InlineObject makeDirPath = new InlineObject();
    makeDirPath.setPath(reqMakeDir.getPath());
    try
    {
      var resp = operationsApi.makeDir(clientId, endpointId, accessToken, makeDirPath);
      if (resp == null || resp.getResult() == null) return null;
      retVal = resp.getStatus();
    }
    catch (ApiException e) { Utils.throwTapisClientException(e.getCode(), e.getResponseBody(), e); }
    catch (Exception e) { Utils.throwTapisClientException(-1, null, e); }

    return retVal;
  }

  /**
   * Rename a path
   *
   * @param clientId Id of client
   * @param endpointId - Id of endpoint
   * @param accessToken - globus access token
   * @return status
   * @throws TapisClientException - If api call throws an exception
   */
  public String renamePath(String clientId, String endpointId, String accessToken, ReqRename reqRename)
          throws TapisClientException
  {
    if (StringUtils.isBlank(endpointId) || StringUtils.isBlank(accessToken) || reqRename == null) return null;

    String retVal = null;
    // NOTE: IF openapi spec changes this class name may change. Not clear how to make code more robust and
    //       not depend on the generated class names.
    InlineObject1 reqRenameObj = new InlineObject1();
    reqRenameObj.setSourcePath(reqRename.getSourcePath());
    reqRenameObj.setDestinationPath(reqRename.getDestinationPath());
    try
    {
      var resp = operationsApi.renamePath(clientId, endpointId, accessToken, reqRenameObj);
      if (resp == null || resp.getResult() == null) return null;
      retVal = resp.getStatus();
    }
    catch (ApiException e) { Utils.throwTapisClientException(e.getCode(), e.getResponseBody(), e); }
    catch (Exception e) { Utils.throwTapisClientException(-1, null, e); }

    return retVal;
  }

  // -----------------------------------------------------------------------
  // --------------------------- Transfers -------------------------------
  // -----------------------------------------------------------------------
  /**
   * Create a transfer task
   *
   * @param clientId Id of client
   * @param accessToken - globus access token
   * @return transfer task
   * @throws TapisClientException - If api call throws an exception
   */
  public TransferTask createTransferTask(String clientId, String accessToken, ReqCreateTransfer reqCreateTransfer)
          throws TapisClientException
  {
    if (StringUtils.isBlank(clientId) || StringUtils.isBlank(accessToken) || reqCreateTransfer == null) return null;

    TransferTask transferTask = new TransferTask();
    // NOTE: IF openapi spec changes this class name may change. Not clear how to make code more robust and
    //       not depend on the generated class names.

    // Create the request object required by the API call.
    var reqCreateTransferApiObj = new InlineObject2();

    // Add all transfer items to the request
    var txfrItems = reqCreateTransferApiObj.getTransferItems();
    var v = reqCreateTransfer.getTransferItems();
    txfrItems.addAll(reqCreateTransfer.getTransferItems());
    reqCreateTransferApiObj.setTransferItems(txfrItems);
    // Set source and destination endpoints
    reqCreateTransferApiObj.setDestinationEndpoint(reqCreateTransfer.getDestinationEndpoint());
    reqCreateTransferApiObj.setSourceEndpoint(reqCreateTransfer.getSourceEndpoint());
    try
    {
      var resp = transfersApi.createTransferTask(clientId, accessToken, reqCreateTransferApiObj);
      if (resp == null || resp.getResult() == null) return null;
      var r = resp.getResult();
      // Create transfer task from result.
      transferTask = buildTransferTask(r);
    }
    catch (ApiException e) { Utils.throwTapisClientException(e.getCode(), e.getResponseBody(), e); }
    catch (Exception e) { Utils.throwTapisClientException(-1, null, e); }

    return transferTask;
  }

  /**
   * Get a transfer task
   *
   * @param clientId Id of client
   * @param accessToken - globus access token
   * @param taskId task id
   * @return transfer task
   * @throws TapisClientException - If api call throws an exception
   */
  public TransferTask getTransferTask(String clientId, String accessToken, String taskId) throws TapisClientException
  {
    if (StringUtils.isBlank(clientId) || StringUtils.isBlank(accessToken) || StringUtils.isBlank(taskId)) return null;

    TransferTask transferTask = null;

    try
    {
      // NOTE: IF openapi spec changes this class name may change. Not clear how to make code more robust and
      //       not depend on the generated class names.
      var resp = transfersApi.getTransferTask(clientId, taskId, accessToken);
      if (resp == null || resp.getResult() == null) return null;
      var r = resp.getResult();

      // Create transfer task from result.
      transferTask = buildTransferTask(r);
    }
    catch (ApiException e) { Utils.throwTapisClientException(e.getCode(), e.getResponseBody(), e); }
    catch (Exception e) { Utils.throwTapisClientException(-1, null, e); }

    return transferTask;
  }

  /**
   * Request to cancel a transfer task
   *
   * @param clientId Id of client
   * @param accessToken - globus access token
   * @param taskId task id
   * @return cancel result
   * @throws TapisClientException - If api call throws an exception
   */
  public ResultCancelTask cancelTransferTask(String clientId, String accessToken, String taskId)
          throws TapisClientException
  {
    if (StringUtils.isBlank(clientId) || StringUtils.isBlank(accessToken) || StringUtils.isBlank(taskId)) return null;

    ResultCancelTask resultCancelTask = new ResultCancelTask();
    try
    {
      // NOTE: IF openapi spec changes this class name may change. Not clear how to make code more robust and
      //       not depend on the generated class names.
      var resp = transfersApi.cancelTransferTask(clientId, taskId, accessToken);
      if (resp == null || resp.getResult() == null) return null;
      var r = resp.getResult();
    }
    catch (ApiException e) { Utils.throwTapisClientException(e.getCode(), e.getResponseBody(), e); }
    catch (Exception e) { Utils.throwTapisClientException(-1, null, e); }

    return resultCancelTask;
  }

  // -----------------------------------------------------------------------
  // --------------------------- Utility Methods ---------------------------
  // -----------------------------------------------------------------------
//  /**
//   * Utility method to build a ReqCreateTransfer object.
//   */
//  public static ReqCreateTransfer buildReqCreateTransfer()
//  {
//    if (subscription == null) return null;
//    ReqPostSubscription rSubscription = new ReqPostSubscription();
//    rSubscription.id(subscription.getId());
//    rSubscription.description(subscription.getDescription());
//    rSubscription.owner(subscription.getOwner());
//    rSubscription.enabled(subscription.getEnabled());
//    rSubscription.typeFilter(subscription.getTypeFilter());
//    rSubscription.subjectFilter(subscription.getSubjectFilter());
//    rSubscription.deliveryMethods(subscription.getDeliveryMethods());
//    // Notes requires special handling. It must be null or a JsonObject
//    Object notes = subscription.getNotes();
//    if (notes == null) rSubscription.notes(null);
//    else if (notes instanceof String) rSubscription.notes(ClientTapisGsonUtils.getGson().fromJson((String) notes, JsonObject.class));
//    else if (notes instanceof JsonObject) rSubscription.notes(notes);
//    else rSubscription.notes(null);
//    return rSubscription;
//  }
//  /**
//   * Utility method to build a ReqPostEvent object.
//   */
//  public static ReqPostEvent buildReqPostEvent(String source, String type, String subject, OffsetDateTime timestamp)
//  {
//    // If any required attributes null then return null.
//    if (StringUtils.isBlank(source) || StringUtils.isBlank(type) || timestamp == null) return null;
//    ReqPostEvent rEvent = new ReqPostEvent();
//    rEvent.source(source);
//    rEvent.type(type);
//    rEvent.subject(subject);
//    rEvent.time(timestamp);
//    return rEvent;
//  }

  // ************************************************************************
  // *********************** Private Methods ********************************
  // ************************************************************************

  /*
   * Create and populate a TransferTask given the result from a call to transfersApi.getTransferTask()
   *  or transfersApi.createTransferTask()
   * Note that the type for the input parameter is from autogenerated code so could change when the
   *   openapi spec is changed.
   */
  TransferTask buildTransferTask(InlineResponse2004Result r)
  {
    TransferTask transferTask = new TransferTask();
    transferTask.setBytesTransferred(r.getBytesTransferred());
    transferTask.setCompletionTime(r.getCompletionTime());
    transferTask.setDeadline(r.getDeadline());
    transferTask.setDestinationEndpointDisplayName(r.getDestinationEndpointDisplayName());
    transferTask.setDestinationEndpointId(r.getDestinationEndpointId());
    transferTask.setDirectories(r.getDirectories());
    transferTask.setEffectiveBytesPerSecond(r.getEffectiveBytesPerSecond());
    transferTask.setEncryptData(r.getEncryptData());
    transferTask.setFailOnQuotaErrors(r.getFailOnQuotaErrors());
    transferTask.setFatalError(r.getFatalError());
    transferTask.setFaults(r.getFaults());
    transferTask.setFiles(r.getFiles());
    transferTask.setFilesSkipped(r.getFilesSkipped());
    transferTask.setFilesTransferred(r.getFilesTransferred());
    transferTask.setHistoryDeleted(r.getHistoryDeleted());
    transferTask.setIsOk(r.getIsOk());
    transferTask.setIsPaused(r.getIsPaused());
    transferTask.setLabel(r.getLabel());
    transferTask.setOwnerId(r.getOwnerId());
    transferTask.setRequestTime(r.getRequestTime());
    transferTask.setSkipSourceErrors(r.getSkipSourceErrors());
    transferTask.setSourceEndpointDisplayName(r.getSourceEndpointDisplayName());
    transferTask.setSourceEndpointId(r.getSourceEndpointId());
    transferTask.setSymlinks(r.getSymlinks());
    transferTask.setSyncLevel(r.getSyncLevel());
    transferTask.setTaskId(r.getTaskId());
    transferTask.setVerifyChecksum(r.getVerifyChecksum());
    // NOTE that although the generated code has two enum types for both Status and Type,
    //   they come from the same sources defined in the openapi spec. Namely, GlobusTransferTaskStatusEnum
    //   and GlobusTaskTypeEnum defined in the openapi spec. So it should be OK to set one from the other
    transferTask.setStatus(TransferTask.StatusEnum.valueOf(r.getStatus().name()));
    transferTask.setType(TransferTask.TypeEnum.valueOf(r.getType().name()));
    return transferTask;
  }
}
