package edu.utexas.tacc.tapis.tokens.client;

import edu.utexas.tacc.tapis.tokens.client.gen.ApiClient;
import edu.utexas.tacc.tapis.tokens.client.gen.ApiException;
import edu.utexas.tacc.tapis.tokens.client.gen.Configuration;
import edu.utexas.tacc.tapis.tokens.client.gen.api.TokensApi;
import edu.utexas.tacc.tapis.tokens.client.gen.model.*;
import org.apache.commons.lang3.StringUtils;

import java.util.Map;

/**
 * Class providing a convenient front-end for the automatically generated client code
 * for the Tokens Service REST API.
 * Underlying client classes with "gen" in the package name are generated by
 * openapi-generator each time a build is run.
 */
public class TokensClient
{
  /* **************************************************************************** */
  /*                                   Constants                                  */
  /* **************************************************************************** */

  /* **************************************************************************** */
  /*                                    Fields                                    */
  /* **************************************************************************** */

  /* **************************************************************************** */
  /*                                 Constructors                                 */
  /* **************************************************************************** */

  public TokensClient() { }

  /**
   * Constructor that overrides the compiled-in basePath value in ApiClient.  This
   * constructor is typically used in production.
   * <p>
   * The path includes the URL prefix up to and including the service root.  By
   * default this value is http://localhost:8080/security.  In production environments
   * the protocol is https and the host/port will be specific to that environment.
   *
   * @param path the base path
   */
  public TokensClient(String path)
  {
    ApiClient apiClient = Configuration.getDefaultApiClient();
    if (!StringUtils.isBlank(path)) apiClient.setBasePath(path);
  }

  /* **************************************************************************** */
  /*                              Public Methods                                  */
  /* **************************************************************************** */

  /**
   * getApiClient: Return underlying ApiClient
   */
  public ApiClient getApiClient() { return Configuration.getDefaultApiClient(); }

  /**
   * addDefaultHeader: Add http header to client
   */
  public ApiClient addDefaultHeader(String key, String val)
  {
    return Configuration.getDefaultApiClient().addDefaultHeader(key, val);
  }

    /**
     * Get a JWT token for a service call
     */
    public String getSvcToken(String tenant, String serviceName) throws Exception
    {
      return getToken(tenant, serviceName, InlineObject1.AccountTypeEnum.SERVICE);
    }

  /**
   * Get a JWT token for a user
   */
  public String getUsrToken(String tenant, String userName) throws Exception
  {
    return getToken(tenant, userName, InlineObject1.AccountTypeEnum.USER);
  }
  /**
   * Get a JWT token of USER or SERVICE type
   */
  private static String getToken(String tenant, String name, InlineObject1.AccountTypeEnum tokType) throws Exception
  {
    String retTok = null;
    var tokApi = new TokensApi();
    // Build the request
    var req = new InlineObject1();
    req.accountType(tokType);
    req.tokenTenantId(tenant);
    req.tokenUsername(name);
    // Make the call and return the result
    Map resp = null;
    // TODO exception handling
    try { resp = (Map) tokApi.createToken(req); }
    catch (ApiException e) {System.out.println("" + e); throw e;}
    // Generated code returns response as a map of maps
    if (resp != null)
    {
      Map resp2 = (Map) resp.get("result");
      if (resp2 != null)
      {
        Map resp3 = (Map) resp2.get("access_token");
        if (resp3 != null) retTok = (String) resp3.get("access_token");
      }
    }
    return retTok;
  }
}
