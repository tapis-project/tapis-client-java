package edu.utexas.tacc.tapis.auth.client;


import edu.utexas.tacc.tapis.client.shared.exceptions.TapisClientException;
import edu.utexas.tacc.tapis.auth.client.gen.ApiException;
import edu.utexas.tacc.tapis.auth.client.gen.api.TokensApi;
import edu.utexas.tacc.tapis.auth.client.gen.ApiClient;
import edu.utexas.tacc.tapis.auth.client.model.GetTokenParms;
import edu.utexas.tacc.tapis.client.shared.Utils;
import edu.utexas.tacc.tapis.client.shared.ClientTapisGsonUtils;
import edu.utexas.tacc.tapis.client.shared.ITapisClient;

import org.apache.commons.lang3.StringUtils;
import com.google.gson.Gson;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import java.util.Map;

/**
 * Class providing a convenient front-end for the automatically generated client code
 * for the Authenticator Service REST API.
 * Underlying client classes with "gen" in the package name are generated by
 * openapi-generator each time a build is run.
 */
public class AuthClient
  implements ITapisClient
{
  // ************************************************************************
  // *********************** Constants **************************************
  // ************************************************************************
  private static final String GRANT_TYPE = "password";

  // ************************************************************************
  // ************************* Enums ****************************************
  // ************************************************************************

  // ************************************************************************
  // *********************** Fields *****************************************
  // ************************************************************************
  // Response serializer.
  private static final Gson _gson = ClientTapisGsonUtils.getGson();

  // Instance of the underlying autogenerated client.
  private final ApiClient apiClient;
  private final TokensApi tokensApi;

  // ************************************************************************
  // *********************** Constructors ***********************************
  // ************************************************************************

  /**
   * Default constructor which uses the compiled-in basePath based on the openapi spec
   *   used to autogenerate the client.
   */
  public AuthClient()
  {
    apiClient = new ApiClient();
    tokensApi = new TokensApi(apiClient);
  }

  /**
   * Constructor that overrides the compiled-in basePath value in ApiClient.
   * The path should include the URL prefix up to and including the service root.
   * In production environments the protocol should be https and the host/port will
   * be specific to that environment.
   *
   * @param path the base path URL prefix up to and including the service root
   */
  public AuthClient(String path)
  {
    apiClient = new ApiClient();
    if (!StringUtils.isBlank(path)) apiClient.setBasePath(path);
    tokensApi = new TokensApi(apiClient);
  }

  // ************************************************************************
  // *********************** Public Methods *********************************
  // ************************************************************************

  /**
   * getApiClient: Return underlying ApiClient
   */
  public ApiClient getApiClient() { return apiClient; }

  /**
   * addDefaultHeader: Add http header to client
   */
  public AuthClient addDefaultHeader(String key, String val) { apiClient.addDefaultHeader(key, val); return this;}

  // Update base path for default client.
  public AuthClient setBasePath(String basePath) { apiClient.setBasePath(basePath); return this;}
  
  /** Close connections and stop threads that can sometimes prevent JVM shutdown.
   */
  public void close()
  {
      try {
          // Best effort attempt to shut things down.
          var okClient = apiClient.getHttpClient();
          if (okClient != null) {
              var pool = okClient.connectionPool();
              if (pool != null) pool.evictAll();
          }
      } catch (Exception e) {}      
  }
  
  /**
   * The create_token request handler that gets a token from the authenticator service based on
   * the parameters provided. Null is return if invalid information is returned by the
   * authenticator service.
   *
   * @param userName
   * @param userPassword
   * @return a string representing a user JWT.
   * @throws TapisClientException on error
   */
  public String getToken(String userName, String userPassword) throws TapisClientException
  {
    String result = null;
    // Build the request
    var req = new GetTokenParms();
    req.setGrantType(GRANT_TYPE);
    req.setUsername(userName);
    req.setPassword(userPassword);

    // Make the call and return the result
    Map resp = null;
    try
    {
      resp = (Map) tokensApi.createToken(req);
    }
    catch (ApiException e) { Utils.throwTapisClientException(e.getCode(), e.getResponseBody(), e); }
    catch (Exception e) { Utils.throwTapisClientException(-1, null, e); }

    // If response came back null return null
    if (resp == null) return result;

    // Marshal only the result from the map.
    String json = _gson.toJson(resp.get("result"));
    // If no result return null
    if (StringUtils.isBlank(json)) return result;

    // Get the access token string.
    JsonObject jsonObj = JsonParser.parseString(json).getAsJsonObject();
    result = jsonObj.get("access_token").getAsJsonObject().get("access_token").getAsString();
    return result;
  }
}